lapply(6:11, suppressWarnings(foo))
foo
foo = function(x){
if (x == 10) warning('X = 10')
else(x)
}
lapply(6:11, suppressWarnings(foo))
suppressWarnings(lapply(6:11, foo))
dim(plantnet)
source('//tsclient/M/code/biol/rarefaction_preprocess.R')
library(raster)
library(rgdal)
library(rgeos)
library(parallel)
source('Z:/users/bitbucket/utils/R/utils_cw.R')
## make this a set of functions...
rasterOptions(tmpdir="//lw-osm-22-cdc/OSM_CDC_LW_MMT_DATA_work/LU/DEV/rtemp")
root = '//lw-osm-22-cdc.it.csiro.au/OSM_CDC_LW_MMT_DATA_work/LU/DEV'
src = paste0(root, '/VCF_Downscaling/OUTPUTS')
f = list.files(src, pattern = '.tif$', full.names = TRUE)
## check
biome = 'IM'
f = f[grep(paste0('GLOBE_pls_', biome), f)]
f
readCropLU = function(filepaths, biome, verbose = FALSE){
## opts
lu_classes = c("c3ann", "c3nfx", "c3per", "c4ann", "c4per", "pastr",
"primf", "primn", "range", "secdf", "secdn", "urban")
## biome mask to crop and work with smaller domain
m = paste0('//lw-osm-02-cdc/OSM_CBR_LW_GPAAG_work/ENV/G/OUT/REALM/',
biome, '/Masks/BIOME_B.flt')
mask = raster(m)
## named output container
lu <- vector("list", length(lu_classes))
names(lu) = lu_classes
## loop
for (i in lu_classes){
lu_i = f[grep(i, f)]
lu_i = stack(lapply(lu_i, raster))
lu_i = crop(lu_i, extent(mask))
lu[[i]] = lu_i
if(verbose) cat('\r', i)
}
return(lu)
}
ptm = proc.time()
IM = readCropLU(f, 'IM', TRUE)
proc.time()-ptm  # ~ 1 hr
IM
dst = 'X:/LU/DEV/VCF_Downscaling/OUTPUTS/IM/'
dir.exists(dst)
dst = '//lw-osm-22-cdc/OSM_CDC_LW_MMT_DATA_work/LU/USGS_NASA_CROPLANDS/realms/'
dir.exists(dst)
dst = '//lw-osm-22-cdc/OSM_CDC_LW_MMT_DATA_work/LU/USGS_NASA_CROPLANDS/realms/IM'
dir.exists(dst)
dir.create(dst)
length(IM)
IM[[1]]
lu = 1
seq_along(nlayers(IM[[lu]]))
IM[[lu]]
nlayers(IM[[lu]])
seq_along(IM)
1:nlayers(IM[[lu]])
names(IM[[lu]])
fbase
yr = 1
names(IM[[lu]][[yr]])
strsplit(names(IM[[lu]][[yr]]), '_')[3:6]
strsplit(names(IM[[lu]][[yr]]), '_')
fbase = paste(strsplit(names(IM[[lu]][[yr]]), '_')[[1]][3:6], collapse = '_')
fbase
fbase = paste0(dst,
paste(strsplit(names(IM[[lu]][[yr]]), '_')[[1]][3:6], collapse = '_'))
fbase
dst = '//lw-osm-22-cdc/OSM_CDC_LW_MMT_DATA_work/LU/USGS_NASA_CROPLANDS/realms/IM/'
NAFlag
?writeRaster
print(names(IM[[lu]]))
print(names(IM)[[lu]])
library(rgdal)
dst = '//lw-osm-22-cdc/OSM_CDC_LW_MMT_DATA_work/LU/USGS_NASA_CROPLANDS/realms/IM/'
for (lu in seq_along(IM)){
print(names(IM)[[lu]])
for (yr in 1:nlayers(IM[[lu]])){
fbase = paste0(dst,
paste(strsplit(names(IM[[lu]][[yr]]), '_')[[1]][3:6], collapse = '_'))
writeRaster(IM[[lu]][[yr]], fbase, format = 'GTiff', NAFlag = -9999)
}
}
for (i in 1:12){
print(names(IM[[i]]))
}
lapply(IM, length)
lapply(IM, function(x) length(names(x)))
## get aggregated 1km USGS / NASA croplands
lu_f = '//lw-osm-22-cdc/OSM_CDC_LW_MMT_DATA_work/LU/USGS_NASA_CROPLANDS/agg_globe/IM_1KM.tif'
lu = raster(lu_f)
lu
lu_im = crop(lu, extent(mask))
raster('//lw-osm-22-cdc/OSM_CDC_LW_MMT_DATA_work/LU/USGS_NASA_CROPLANDS/realms/IM/IM_c3nfx_1km_2002.tif')
m = paste0('//lw-osm-02-cdc/OSM_CBR_LW_GPAAG_work/ENV/G/OUT/REALM/',
biome, '/Masks/BIOME_B.flt')
mask = raster(m)
lu_im = crop(lu, extent(mask))
dst = '//lw-osm-22-cdc/OSM_CDC_LW_MMT_DATA_work/LU/USGS_NASA_CROPLANDS/realms/IM/'
writeRaster(lu_im, paste0(dst, 'IM_CROPLANDS_1KM.tif'), format = 'GTiff', NAFlag = -9999)
dst = '//lw-osm-22-cdc/OSM_CDC_LW_MMT_DATA_work/LU/USGS_NASA_CROPLANDS/realms/IM/IM_CROPLANDS_1KM.tif'
file.exists(dst)
rd = list.files('Z:/users/war42q/BBS/data/anhat/', pattern = '.RData', full.names = TRUE)
print(load(rd[2]))
araneae = tax_i
selected_preds = list.files('Z:/users/war42q/BBS/data/anhat/', pattern = '.txt', full.names = TRUE)
araneae_preds = read.table(selected_preds[1])
araneae$predictors
araneae$explained
## araneae
araneae_tab = read.csv('Z:/users/war42q/BBS/dump/bbPredOut.csv')
dim(araneae_tab)
####
tabb_gdm <- df2gdmData(araneae_tab)
import('ala.lib')
## or give gdm modeller a whirl
## create sitexspp table as an input
import('gdm.lib')
library(gdm)
library(rgeos)
library(rgdal)
source('Z:/users/bitbucket/utils/R/utils_cw.R')
library(raster)
raster.tempdir()
import('gdm.lib')
tools('gdm.lib')
####
tabb_gdm <- df2gdmData(araneae_tab)
ara_fat_gdm <- gdm(tabb_gdm, geo = TRUE)
ara_fat_gdm$explained
coefs <- coefficients(ara_fat_gdm)
coefs
coefsl <- 1:length(coefs)
index <- split(coefsl, ceiling(seq_along(coefsl)/3))
coef_sum <- sapply(index, function(x) sum(coefs[x]))
zero_coefs <- which(unname(coef_sum) == 0)
zero_coefs
gdmTabb <- tabb_gdm
if(length(zero_coefs) != 0){
# preference to not drop geo
if(1 %in% zero_coefs & length(zero_coefs) > 1) drop1 <- zero_coefs[2]
if(1 %in% zero_coefs & length(zero_coefs) == 1) drop1 <- NULL
if(!(1 %in% zero_coefs)) drop1 <- zero_coefs[1]
if(!is.null(drop1)){
zero_pred <- ara_fat_gdm$predictors[drop1]
zero_pred <- paste(zero_pred, '$', sep = '')
out_cols <- grep(zero_pred, names(gdmTabb))
} else {
# switch in case geo is the only zero pred
out_cols <- NULL
} # end geo out_col if/else
}
zero_pred <- ara_fat_gdm$predictors[zero_coefs]
zero_pred <- paste(zero_pred, '$', sep = '')
out_cols <- sort(unlist(lapply(zero_pred, grep, x = names(gdmTabb))))
gdmTabb <- gdmTabb[,-c(out_cols)]
ara_thin_gdm <- gdm(gdmTabb, geo = TRUE)
ara_thin_gdm$explained
warnigns()
warnings()
dim(araneae_tab)
ara_fat_gdm$explained
ara_thin_gdm$explained
pruneZeroCoefs = function(mod, gdmTab, run_mod = TRUE){
## look at ceofs of model
coefs <- coefficients(mod)
coefsl <- 1:length(coefs)
index <- split(coefsl, ceiling(seq_along(coefsl)/3))
coef_sum <- sapply(index, function(x) sum(coefs[x]))
zero_coefs <- which(unname(coef_sum) == 0)
if(length(zero_coefs) != 0){
# preference to not drop geo
if(1 %in% zero_coefs & length(zero_coefs) > 1) drop1 = zero_coefs[2]
if(1 %in% zero_coefs & length(zero_coefs) == 1) drop1 = NULL
if(!(1 %in% zero_coefs)) drop1 <- zero_coefs[1]
if(!is.null(drop1)){
zero_pred = mod$predictors[drop1]
zero_pred = paste(zero_pred, '$', sep = '')
out_cols = grep(zero_pred, names(gdmTab))
} else {
# switch in case geo is the only zero pred
out_cols = NULL
} # end geo out_col if/else
}
if(run_mod){
zero_pred <- mod$predictors[zero_coefs]
zero_pred <- paste(zero_pred, '$', sep = '')
out_cols <- sort(unlist(lapply(zero_pred, grep, x = names(gdmTab))))
gdmTab <- gdmTab[,-c(out_cols)]
thinned_mod <- gdm(gdmTab, geo = TRUE)
return(list(thinned_mod = thinned_mod))
} else {
return(list(out_cols = out_cols))
}
}
pruneZeroCoefs = function(mod, gdmTab, run_mod = TRUE){
## look at ceofs of model
coefs <- coefficients(mod)
coefsl <- 1:length(coefs)
index <- split(coefsl, ceiling(seq_along(coefsl)/3))
coef_sum <- sapply(index, function(x) sum(coefs[x]))
zero_coefs <- which(unname(coef_sum) == 0)
if(length(zero_coefs) != 0){
# preference to not drop geo
if(1 %in% zero_coefs & length(zero_coefs) > 1) drop1 = zero_coefs[2]
if(1 %in% zero_coefs & length(zero_coefs) == 1) drop1 = NULL
if(!(1 %in% zero_coefs)) drop1 <- zero_coefs[1]
if(!is.null(drop1)){
zero_pred = mod$predictors[drop1]
zero_pred = paste(zero_pred, '$', sep = '')
out_cols = grep(zero_pred, names(gdmTab))
} else {
# switch in case geo is the only zero pred
out_cols = NULL
} # end geo out_col if/else
}
if(run_mod){
zero_pred <- mod$predictors[zero_coefs]
zero_pred <- paste(zero_pred, '$', sep = '')
out_cols <- sort(unlist(lapply(zero_pred, grep, x = names(gdmTab))))
gdmTab <- gdmTab[,-c(out_cols)]
thinned_mod <- gdm(gdmTab, geo = TRUE)
return(list(out_cols = out_cols, thinned_mod = thinned_mod))
} else {
return(list(out_cols = out_cols))
}
}
ara_thinned = pruneZeroCoefs(ara_fat_gdm, gdmTab, TRUE)
gdmTab = gdmTabb
ara_thinned = pruneZeroCoefs(ara_fat_gdm, gdmTab, TRUE)
## mods
## ----------------------------------------------------------------------------
gdmTab <- df2gdmData(araneae_tab)
ara_thinned = pruneZeroCoefs(ara_fat_gdm, gdmTab, TRUE)
ara_thinned$thinned_mod$explained
?gdm.transform
env
flt <- bs()
f <- list.files(flt, pattern = "\\.flt$", recursive = T, full.names = T)
## take f and remove the five unecessary grids
fnames <- unlist(lapply(f, basename))
fnames <- gsub('.flt', '', fnames)
to_rm <- c('MASK0', 'SLOPE', 'MRVBFV6G-3', 'TWIFD80_011', 'SLPRELIEF')
rm_vars <- unlist(lapply(to_rm, grep, x = fnames))
rm_vars <- rm_vars[-c(which(fnames[rm_vars] == 'SLOPEDEG' ))]
floats_to_use <- f[-c(rm_vars)]
env <- lapply(floats_to_use, raster)
## Stored in three difference crs
## Check rc
x <- sapply(env, function(x) c(dim(x)[1])) # all equal
y <- sapply(env, function(x) c(dim(x)[2])) # all equal
for (i in seq_along(env)) crs(env[[i]]) <- NA
env <- stack(unlist(env))
names(env)
ara_thinned$thinned_mod$predictors
dim(araneae_tab)
ara_fat_gdm$predictors
coefs <- coefficients(ara_thin_gdm)
coefsl <- 1:length(coefs)
index <- split(coefsl, ceiling(seq_along(coefsl)/3))
index
coef_sum <- sapply(index, function(x) sum(coefs[x]))
coef_sum
which.min(coef_sum)
order(coef_sum)
order(c(2,1, 3))
rev(order(coef_sum))
rev(order(coef_sum))[1:15]
best15 = ara_thin_gdm$predictors[rev(order(coef_sum))[1:15]]
pattern = '.txt', full.names = TRUE)
araneae_preds
best15
sort(best15)
sort(araneae_preds$V1)
sort(as.character(paste(araneae_preds$V1)))
sort(best15)
best15
names(gdmTab)
cols15 = c(1:6, order(unlist(lapply(best15, function(x) grep(x, names(gdmTab))))))
cols15
cols15 = c(1:6, sort(unlist(lapply(best15, function(x) grep(x, names(gdmTab))))))
cols15
names(gdmTab)[cols15]
gdmTab15 = df2gdmData(gdmTab[, c(cols15)])
mod15 = gdm(gdmTab15, geo = TRUE)
mod15$explained
cols_select = araneae_preds$V1
cols_select = c(1:6, sort(unlist(lapply(cols_select, function(x) grep(x, names(gdmTab))))))
gdmTabSelect = df2gdmData(gdmTab[, c(cols_select)])
names(gdmTabSelect)
mod_select = gdm(gdmTabSelect, geo = TRUE)
mod_select$explained
names(ara_thinned)
## any zero coefs?
coefs <- coefficients(mod15)
coefsl <- 1:length(coefs)
index <- split(coefsl, ceiling(seq_along(coefsl)/3))
coef_sum <- sapply(index, function(x) sum(coefs[x]))
coef_sum
if(any(coef_sum == 0)) cat('Still zero preds')
if(any(coef_sum >= 0)) cat('Still zero preds')
## tranform grids
## ----------------------------------------------------------------------------
ara_15 = mod15
araTab_15 = gdmTab15
names(gdmTab15)[-c(1:6)]
strsplit(names(gdmTab15)[-c(1:6)], '\\.')
selectedRasters = unlist(
lapply(strsplit(names(gdmTab15)[-c(1:6)], '\\.'), '[', 2))
selectedRasters
selected_vars = unique(unlist(
lapply(strsplit(names(gdmTab15)[-c(1:6)], '\\.'), '[', 2)))
selected_vars
names(env)
env
env[[1]]
selected_rasters = sort(unlist(lapply(selected_vars, function(x)
grep(x, names(env)))))
selected_rasters
ara_rasters = env[selected_rasters]
names(ara_rasters)
class(ara_rasters)
ara_rasters = env[[selected_rasters]]
class(ara_rasters)
names(ara_rasters)
selected_vars
ptm = proc.time()
trans_ara = gdm.transform(ara_15, ara_rasters)
library(gdmEngine)
get_latest = function(){
pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow'
setwd(pkg_root)
file.copy(paste0('gdmEngine'), .libPaths(), recursive = TRUE)
cat(paste0('gdmEngine copied to ', .libPaths()))
require(gdmEngine)
}
get_latest()
library(gdmEngine)
gdmEngine::TransformGrids
pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine'
setwd(pkg_root)
install(quick = TRUE)
library(devtools)
install(quick = TRUE)
library(spatstat)
library(Rcpp)
install.packages('Rcpp')
install.packages("Rcpp")
library(Rcpp)
ptm = proc.time()
trans_ara = gdm.transform(ara_15, ara_rasters)
proc.time()-ptm
7834/60/60
class(trans_ara)
dim(trans_ara)
dst = 'U:/Eureka/gdm'
nlayers(trans_ara)
nlayers(ara_rasters)
names(trans_ara)
seq_along(3:16)
layer
dim(trans_ara[[i]])
nlayers(ara_rasters)
nlayers(trans_ara)
dim(trans_ara[[1]])
names(trans_ara[[1]])
layer = trans_ara[[1]]
names(layer)
?writeRaster
cellStats(layer, 'min')
for (i in 3:16){
layer = trans_ara[[i]]
fn = paste0(dst, '/', names(layer), 'Tran.tiff')
writeRaster(layer, fn, format = 'GTiff', NAflag = -9999)
print(fn)
}
names(env)
rd = list.files('//ces-10-cdc/OSM_CDC_MMRG_work/users/war42q/BBS/data/anhat/', pattern = '.RData',
full.names = TRUE)
print(load(rd[5]))
lep = tax_i
selected_preds = list.files('//ces-10-cdc/OSM_CDC_MMRG_work/users/war42q/BBS/data/anhat/',
pattern = '.txt', full.names = TRUE)
lep_preds = read.table(selected_preds[2])
## araneae
lep_tab = read.csv('//ces-10-cdc/OSM_CDC_MMRG_work/users/war42q/BBS/dump/aaPredOut.csv')
###########
### ENV ###
# ##########
# flt <- bs()
# \\ces-10-cdc\OSM_CDC_R38141_BushBlitz_work\working\per239
# f <- list.files(flt, pattern = "\\.flt$", recursive = T, full.names = T)
#
# ## take f and remove the five unecessary grids
# fnames <- unlist(lapply(f, basename))
# fnames <- gsub('.flt', '', fnames)
# to_rm <- c('MASK0', 'SLOPE', 'MRVBFV6G-3', 'TWIFD80_011', 'SLPRELIEF')
# rm_vars <- unlist(lapply(to_rm, grep, x = fnames))
# rm_vars <- rm_vars[-c(which(fnames[rm_vars] == 'SLOPEDEG' ))]
# floats_to_use <- f[-c(rm_vars)]
#
# env <- lapply(floats_to_use, raster)
# ## Stored in three difference crs
# ## Check rc
# x <- sapply(env, function(x) c(dim(x)[1])) # all equal
# y <- sapply(env, function(x) c(dim(x)[2])) # all equal
# for (i in seq_along(env)) crs(env[[i]]) <- NA
# env <- stack(unlist(env))
# names(env)
## functions
## ----------------------------------------------------------------------------
library(raster)
pruneZeroCoefs = function(mod, gdmTab, run_mod = TRUE){
## look at ceofs of model
coefs <- coefficients(mod)
coefsl <- 1:length(coefs)
index <- split(coefsl, ceiling(seq_along(coefsl)/3))
coef_sum <- sapply(index, function(x) sum(coefs[x]))
zero_coefs <- which(unname(coef_sum) == 0)
if(length(zero_coefs) != 0){
# preference to not drop geo
if(1 %in% zero_coefs & length(zero_coefs) > 1) drop1 = zero_coefs[2]
if(1 %in% zero_coefs & length(zero_coefs) == 1) drop1 = NULL
if(!(1 %in% zero_coefs)) drop1 <- zero_coefs[1]
if(!is.null(drop1)){
zero_pred = mod$predictors[drop1]
zero_pred = paste(zero_pred, '$', sep = '')
out_cols = grep(zero_pred, names(gdmTab))
} else {
# switch in case geo is the only zero pred
out_cols = NULL
} # end geo out_col if/else
}
if(run_mod){
zero_pred <- mod$predictors[zero_coefs]
zero_pred <- paste(zero_pred, '$', sep = '')
out_cols <- sort(unlist(lapply(zero_pred, grep, x = names(gdmTab))))
gdmTab <- gdmTab[,-c(out_cols)]
thinned_mod <- gdm(gdmTab, geo = TRUE)
return(list(out_cols = out_cols, thinned_mod = thinned_mod))
} else {
return(list(out_cols = out_cols))
}
}
## mods
## ----------------------------------------------------------------------------
gdmTab <- df2gdmData(lep_tab)
lep_fat_gdm <- gdm(gdmTab, geo = TRUE)
lep_fat_gdm$explained
lep_thinned = pruneZeroCoefs(lep_fat_gdm, gdmTab, TRUE)
lep_thinned$thinned_mod$explained
coefs <- coefficients(lep_thinned$thinned_mod)
coefsl <- 1:length(coefs)
index <- split(coefsl, ceiling(seq_along(coefsl)/3))
coef_sum <- sapply(index, function(x) sum(coefs[x]))
## I need to further reduce this model...
## er... just take first 15 predictors, check that the de doesn't go down
## drastically, and go with that...
best15 = lep_thinned$thinned_mod$predictors[rev(order(coef_sum))[1:15]]
sort(best15)
cols15 = c(1:6, sort(unlist(lapply(best15, function(x) grep(x, names(gdmTab))))))
gdmTab15 = df2gdmData(gdmTab[, c(cols15)])
mod15 = gdm(gdmTab15, geo = TRUE)
mod15$explained
## any zero coefs?
coefs <- coefficients(mod15)
coefsl <- 1:length(coefs)
index <- split(coefsl, ceiling(seq_along(coefsl)/3))
coef_sum <- sapply(index, function(x) sum(coefs[x]))
if(any(coef_sum == 0)) cat('Still zero preds')
## tranform grids
## ----------------------------------------------------------------------------
lep_15 = mod15
lepTab_15 = gdmTab15
selected_vars = unique(unlist(
lapply(strsplit(names(gdmTab15)[-c(1:6)], '\\.'), '[', 2)))
selected_rasters = sort(unlist(lapply(selected_vars, function(x)
grep(x, names(env)))))
lep_rasters = env[[selected_rasters]]
ptm = proc.time()
trans_lep = gdm.transform(lep_15, lep_rasters)
proc.time()-ptm
dst = '//ces-10-cdc/OSM_CDC_R38141_BushBlitz_work/Eureka/gdm/LEP2'
if(!dir.exists(dst)) dir.create(dst)
for (i in 3:16){
layer = trans_lep[[i]]
fn = paste0(dst, names(layer), 'Tran.tiff')
writeRaster(layer, fn, format = 'GTiff', NAflag = -9999)
print(fn)
}
(8257 / 60)/60
gdm::gdm.transform
?gdm::gdm.transform
1-exp(-2)
1-exp(-1000)
1-exp(-100)
unlink
-log(1-1000)
-log(1-1)
1-exp(5)
envspace = 1-exp(5); envspace
-log(1-envspace)
log(1-envspace)
-1 * -1
lep_15$coefficients
