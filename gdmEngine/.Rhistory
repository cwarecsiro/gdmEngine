results.tbl$Sitepairs.Geo.Evenness[i.run] = mean(Sitepair_assessor_results$SitepairsGeoEvenness)
results.tbl$Min.Sitepairs.GeoDistance[i.run] = mean(Sitepair_assessor_results$SitepairsGeoDistanceSummary[,1])
results.tbl$Q1.Sitepairs.GeoDistance[i.run] = mean(Sitepair_assessor_results$SitepairsGeoDistanceSummary[,2])
results.tbl$Mdn.Sitepairs.GeoDistance[i.run] = mean(Sitepair_assessor_results$SitepairsGeoDistanceSummary[,3])
results.tbl$Q3.Sitepairs.GeoDistance[i.run] = mean(Sitepair_assessor_results$SitepairsGeoDistanceSummary[,5])
results.tbl$Max.Sitepairs.GeoDistance[i.run] = mean(Sitepair_assessor_results$SitepairsGeoDistanceSummary[,6])
results.tbl$Sites.Env.Evenness[i.run] = mean(Sitepair_assessor_results$SitesEnvEvenness)
results.tbl$Sitepairs.Env.Evenness[i.run] = mean(Sitepair_assessor_results$SitepairsEnvEvenness)
results.tbl$Min.Sitepairs.EnvDistance[i.run] = mean(Sitepair_assessor_results$SitepairsEnvDistanceSummary[,1])
results.tbl$Q1.Sitepairs.EnvDistance[i.run] = mean(Sitepair_assessor_results$SitepairsEnvDistanceSummary[,2])
results.tbl$Mdn.Sitepairs.EnvDistance[i.run] = mean(Sitepair_assessor_results$SitepairsEnvDistanceSummary[,3])
results.tbl$Q3.Sitepairs.EnvDistance[i.run] = mean(Sitepair_assessor_results$SitepairsEnvDistanceSummary[,5])
results.tbl$Max.Sitepairs.EnvDistance[i.run] = mean(Sitepair_assessor_results$SitepairsEnvDistanceSummary[,6])
results.tbl$Min.nTimes.SitesUsedInPairs[i.run] = mean(Sitepair_assessor_results$nTimesSitesUsedInPairs[,1])
results.tbl$Q1.nTimes.SitesUsedInPairs[i.run] = mean(Sitepair_assessor_results$nTimesSitesUsedInPairs[,2])
results.tbl$Mdn.nTimes.SitesUsedInPairs[i.run] = mean(Sitepair_assessor_results$nTimesSitesUsedInPairs[,3])
results.tbl$Q3.nTimes.SitesUsedInPairs[i.run] = mean(Sitepair_assessor_results$nTimesSitesUsedInPairs[,5])
results.tbl$Max.nTimes.SitesUsedInPairs[i.run] = mean(Sitepair_assessor_results$nTimesSitesUsedInPairs[,6])
# remove the results
rm(Sitepair_assessor_results)
}# end if !is.na(f.name)
} # end for i.run
parameter.results.tbl <- cbind(parameter.tbl, results.tbl)
taxa.results.tbl <- smartbind(taxa.results.tbl,parameter.results.tbl)
}# end for i.smp
analysis.out.folder
taxa.results.tbl<-taxa.results.tbl[!is.na(taxa.results.tbl$run.name),]
write.csv(taxa.results.tbl, paste0("//osm-23-cdc/OSM_CBR_LW_DEE_work/processing/biol/",taxa,"/SitePairSampleAssessment/",taxa,"_SampleAssess_Results.csv"), row.names = FALSE)
parameter.results.tbl<-taxa.results.tbl[!is.na(taxa.results.tbl$run.name),]
#parameter.results.tbl<-read.csv(paste0("//osm-23-cdc/OSM_CBR_LW_DEE_work/processing/biol/",taxa,"/SitePairSampleAssessment/",taxa,"_SampleAssess_Results.csv"))
figures.out.folder<-paste0("//osm-23-cdc/OSM_CBR_LW_DEE_work/processing/biol/",taxa,"/SitePairSampleAssessment/Figures")
parameter.results.tbl$p.sample.method<-as.factor(parameter.results.tbl$p.sample.method)
parameter.results.tbl$p.n.pairs.per.site<-as.factor(parameter.results.tbl$p.n.pairs.per.site)
parameter.results.tbl$p.b.used.factor<-as.factor(parameter.results.tbl$p.b.used.factor)
parameter.results.tbl$p.b.epair.factor<-as.factor(parameter.results.tbl$p.b.epair.factor)
parameter.results.tbl$p.sigma.spair<-as.factor(parameter.results.tbl$p.sigma.spair)
parameter.results.tbl$p.b.spair.factor<-as.factor(parameter.results.tbl$p.b.spair.factor)
parameter.results.tbl$p.b.dpair.factor<-as.factor(parameter.results.tbl$p.b.dpair.factor)
parameter.results.tbl$p.bandwidth.geowt<-as.factor(parameter.results.tbl$p.bandwidth.geowt)
parameter.results.tbl$p.bandwidth.skip<-as.factor(parameter.results.tbl$p.bandwidth.skip)
parameter.results.tbl$p.bandwidth.DistFact<-as.factor(parameter.results.tbl$p.bandwidth.DistFact)
parameter.results.tbl$p.geowt.RndProp<-as.factor(parameter.results.tbl$p.geowt.RndProp)
ggplot(parameter.results.tbl, aes(x=p.n.pairs.per.site, y=Dissimilarity.Evenness)) +
geom_boxplot() +
facet_grid(. ~ p.sample.method)
## Plot results ###############################################
library(ggplot2)
ggplot(parameter.results.tbl, aes(x=p.n.pairs.per.site, y=Dissimilarity.Evenness)) +
geom_boxplot() +
facet_grid(. ~ p.sample.method)
ggplot(parameter.results.tbl, aes(x=p.sample.method, y=Dissimilarity.Evenness)) +
geom_boxplot()
p1<-ggplot(parameter.results.tbl, aes(x=p.sample.method, y=Dissimilarity.Evenness)) +
geom_boxplot() + labs(y = "Dissim.Even") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p2<-ggplot(parameter.results.tbl, aes(x=p.sample.method, y=Mdn.Dissimilarity)) +
geom_boxplot() + labs(y = "Mdn.Dissim") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p3<-ggplot(parameter.results.tbl, aes(x=p.sample.method, y=Sitepairs.Geo.Evenness) +
p4<-ggplot(parameter.results.tbl, aes(x=p.sample.method, y=Sitepairs.Env.Evenness) +
p5<-ggplot(parameter.results.tbl, aes(x=p.sample.method, y=Mdn.Sitepairs.EnvDistance) +
p6<-ggplot(parameter.results.tbl, aes(x=p.sample.method, y=Mdn.Sitepairs.GeoDistance) +
multiplot(p1, p2, p3, p4, p5,p6,cols=1)
)
)
)
p1<-ggplot(parameter.results.tbl, aes(x=p.sample.method, y=Dissimilarity.Evenness)) +
geom_boxplot() + labs(y = "Dissim.Even") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p2<-ggplot(parameter.results.tbl, aes(x=p.sample.method, y=Mdn.Dissimilarity)) +
geom_boxplot() + labs(y = "Mdn.Dissim") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p3<-ggplot(parameter.results.tbl, aes(x=p.sample.method, y=Sitepairs.Geo.Evenness) +
geom_boxplot() + labs(y = "Geo.Even") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p4<-ggplot(parameter.results.tbl, aes(x=p.sample.method, y=Sitepairs.Env.Evenness) +
geom_boxplot() + labs(y = "Env.Even") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p5<-ggplot(parameter.results.tbl, aes(x=p.sample.method, y=Mdn.Sitepairs.EnvDistance) +
geom_boxplot() + labs(y = "Mdn.Env.Dist") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p6<-ggplot(parameter.results.tbl, aes(x=p.sample.method, y=Mdn.Sitepairs.GeoDistance) +
p6<-ggplot(parameter.results.tbl, aes(x=p.sample.method, y=Mdn.Sitepairs.GeoDistance) +
geom_boxplot() + labs(y = "Mdn.Geo.Dist")
p1<-ggplot(parameter.results.tbl, aes(x=p.sample.method, y=Dissimilarity.Evenness)) +
geom_boxplot() + labs(y = "Dissim.Even") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p2<-ggplot(parameter.results.tbl, aes(x=p.sample.method, y=Mdn.Dissimilarity)) +
geom_boxplot() + labs(y = "Mdn.Dissim") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p3<-ggplot(parameter.results.tbl, aes(x=p.sample.method, y=Sitepairs.Geo.Evenness)) +
geom_boxplot() + labs(y = "Geo.Even") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p4<-ggplot(parameter.results.tbl, aes(x=p.sample.method, y=Sitepairs.Env.Evenness)) +
geom_boxplot() + labs(y = "Env.Even") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p5<-ggplot(parameter.results.tbl, aes(x=p.sample.method, y=Mdn.Sitepairs.EnvDistance)) +
geom_boxplot() + labs(y = "Mdn.Env.Dist") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p6<-ggplot(parameter.results.tbl, aes(x=p.sample.method, y=Mdn.Sitepairs.GeoDistance)) +
geom_boxplot() + labs(y = "Mdn.Geo.Dist")
multiplot(p1, p2, p3, p4, p5, p6, cols=1)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}

library(grid)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}

multiplot(p1, p2, p3, p4, p5, p6, cols=1)
png(paste0(figures.out.folder,"/SampleMethod_PerformaceSummary.png"),height=1000,width=500)
multiplot(p1, p2, p3, p4, p5, p6, cols=1)
dev.off()#___
p1<-ggplot(parameter.results.tbl, aes(x=p.bandwidth.geowt, y=Dissimilarity.Evenness, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Dissim.Even") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p2<-ggplot(parameter.results.tbl, aes(x=p.bandwidth.geowt, y=Mdn.Dissimilarity, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Mdn.Dissim") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p3<-ggplot(parameter.results.tbl, aes(x=p.bandwidth.geowt, y=Sitepairs.Geo.Evenness, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Geo.Even") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p4<-ggplot(parameter.results.tbl, aes(x=p.bandwidth.geowt, y=Sitepairs.Env.Evenness, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Env.Even") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p5<-ggplot(parameter.results.tbl, aes(x=p.bandwidth.geowt, y=Mdn.Sitepairs.EnvDistance, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Mdn.Env.Dist") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p6<-ggplot(parameter.results.tbl, aes(x=p.bandwidth.geowt, y=Mdn.Sitepairs.GeoDistance, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Mdn.Geo.Dist")
png(paste0(figures.out.folder,"/p_bandwidth_geowt.png"),height=1000,width=500)
multiplot(p1, p2, p3, p4, p5,p6,cols=1)
dev.off()#___
ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.bandwidth.geowt, y=Dissimilarity.Evenness, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Dissim.Even") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p1<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.bandwidth.geowt, y=Dissimilarity.Evenness, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Dissim.Even") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p2<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.bandwidth.geowt, y=Mdn.Dissimilarity, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Mdn.Dissim") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p3<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.bandwidth.geowt, y=Sitepairs.Geo.Evenness, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Geo.Even") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p4<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.bandwidth.geowt, y=Sitepairs.Env.Evenness, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Env.Even") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p5<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.bandwidth.geowt, y=Mdn.Sitepairs.EnvDistance, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Mdn.Env.Dist") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p6<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.bandwidth.geowt, y=Mdn.Sitepairs.GeoDistance, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Mdn.Geo.Dist")
png(paste0(figures.out.folder,"/p_bandwidth_geowt.png"),height=1000,width=500)
multiplot(p1, p2, p3, p4, p5,p6,cols=1)
dev.off()#___
p1<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.bandwidth.skip, y=Dissimilarity.Evenness, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Dissim.Even") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p2<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.bandwidth.skip, y=Mdn.Dissimilarity, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Mdn.Dissim") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p3<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.bandwidth.skip, y=Sitepairs.Geo.Evenness, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Geo.Even") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p4<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.bandwidth.skip, y=Sitepairs.Env.Evenness, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Env.Even") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p5<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.bandwidth.skip, y=Mdn.Sitepairs.EnvDistance, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Mdn.Env.Dist") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p6<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.bandwidth.skip, y=Mdn.Sitepairs.GeoDistance, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Mdn.Geo.Dist")
png(paste0(figures.out.folder,"/p_bandwidth_skip.png"),height=1000,width=500)
multiplot(p1, p2, p3, p4, p5,p6,cols=1)
dev.off()#___
p1<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.bandwidth.DistFact, y=Dissimilarity.Evenness, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Dissim.Even") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p2<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.bandwidth.DistFact, y=Mdn.Dissimilarity, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Mdn.Dissim") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p3<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.bandwidth.DistFact, y=Sitepairs.Geo.Evenness, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Geo.Even") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p4<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.bandwidth.DistFact, y=Sitepairs.Env.Evenness, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Env.Even") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p5<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.bandwidth.DistFact, y=Mdn.Sitepairs.EnvDistance, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Mdn.Env.Dist") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p6<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.bandwidth.DistFact, y=Mdn.Sitepairs.GeoDistance, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Mdn.Geo.Dist")
png(paste0(figures.out.folder,"/p_bandwidth_distFact.png"),height=1000,width=500)
multiplot(p1, p2, p3, p4, p5,p6,cols=1)
dev.off()#___
p1<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.geowt.RndProp, y=Dissimilarity.Evenness, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Dissim.Even") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p2<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.geowt.RndProp, y=Mdn.Dissimilarity, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Mdn.Dissim") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p3<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.geowt.RndProp, y=Sitepairs.Geo.Evenness, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Geo.Even") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p4<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.geowt.RndProp, y=Sitepairs.Env.Evenness, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Env.Even") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p5<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.geowt.RndProp, y=Mdn.Sitepairs.EnvDistance, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Mdn.Env.Dist") + theme(axis.text.x=element_blank(), axis.title.x=element_blank())
p6<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.geowt.RndProp, y=Mdn.Sitepairs.GeoDistance, fill=p.n.pairs.per.site)) +
geom_boxplot() + labs(y = "Mdn.Geo.Dist")
png(paste0(figures.out.folder,"/p_bandwidth_randProp.png"),height=1000,width=500)
multiplot(p1, p2, p3, p4, p5,p6,cols=1)
dev.off()#___
p1<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.bandwidth.geowt, y=ProcTime, fill=p.n.pairs.per.site)) +
geom_boxplot() + ylim(0, 10000) +  theme(legend.position="none")
p2<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.bandwidth.skip, y=ProcTime, fill=p.n.pairs.per.site)) +
geom_boxplot() + ylim(0, 10000) +  theme(axis.text.y=element_blank(), axis.title.y=element_blank(), legend.position="none")
p3<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.bandwidth.DistFact, y=ProcTime, fill=p.n.pairs.per.site)) +
geom_boxplot() + ylim(0, 10000) +  theme(axis.text.y=element_blank(), axis.title.y=element_blank(), legend.position="none")
p4<-ggplot(parameter.results.tbl[parameter.results.tbl$p.sample.method == "geowt",], aes(x=p.geowt.RndProp, y=ProcTime, fill=p.n.pairs.per.site)) +
geom_boxplot() + ylim(0, 10000) +  theme(axis.text.y=element_blank(), axis.title.y=element_blank(), legend.position="none")
png(paste0(figures.out.folder,"/p_bandwidth_ProcTime.png"),height=500,width=1000)
multiplot(p1, p2, p3, p4, cols=4)
dev.off()#___
taxa <- "land_snails"
# Specify the sample types
sample_method <- c("envdist","geodens","geodist","geowt","random")
# Loop through the sample methods, and join the data together
taxa.results.tbl <- NULL
for(i.smp in 1:length(sample_method))
{
smp.mth <- sample_method[i.smp]
# Specify the folder where the output files are held
analysis.out.folder<-paste0("//osm-23-cdc/OSM_CBR_LW_DEE_work/processing/biol/",taxa,"/SitePairSampleAssessment/",smp.mth)  ## **CHANGE FOR EACH TAXA**
analysis.out.files<-as.character(list.files(analysis.out.folder))
# Read in the parameter table
parameter.tbl<-read.csv(paste0(analysis.out.folder,"/",taxa,"_parameters_",smp.mth,".csv")) ## **CHANGE FOR EACH TAXA**
# Create a table to catch the summary data
results.tbl <- data.frame(ProcTime = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Dissimilarity.Evenness = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Min.Dissimilarity = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Q1.Dissimilarity = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Mdn.Dissimilarity = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Q3.Dissimilarity = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Max.Dissimilarity = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Sites.Geo.Evenness = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Sitepairs.Geo.Evenness = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Min.Sitepairs.GeoDistance = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Q1.Sitepairs.GeoDistance = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Mdn.Sitepairs.GeoDistance = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Q3.Sitepairs.GeoDistance = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Max.Sitepairs.GeoDistance = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Sites.Env.Evenness = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Sitepairs.Env.Evenness = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Min.Sitepairs.EnvDistance = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Q1.Sitepairs.EnvDistance = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Mdn.Sitepairs.EnvDistance = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Q3.Sitepairs.EnvDistance = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Max.Sitepairs.EnvDistance = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Min.nTimes.SitesUsedInPairs = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Q1.nTimes.SitesUsedInPairs = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Mdn.nTimes.SitesUsedInPairs = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Q3.nTimes.SitesUsedInPairs = as.numeric(rep(NA,times=nrow(parameter.tbl))),
Max.nTimes.SitesUsedInPairs = as.numeric(rep(NA,times=nrow(parameter.tbl)))  )
# Now loop through parameter combos, see if there's an output file for each, read it in and
# summarise the results, catching in the output table.
for(i.run in 1:nrow(parameter.tbl))
{
#find if there is an output file to match the run.name
#paste(as.character(parameter.tbl$run.name[i.run]),"_",sep='')
f.name <- analysis.out.files[pmatch(paste(as.character(parameter.tbl$run.name[i.run]),"_",sep=''), analysis.out.files)]
if(!is.na(f.name))
{
# open the file
load(file.path(analysis.out.folder,f.name))
# catch the results
results.tbl$ProcTime[i.run] = Sitepair_assessor_results$ProcessingTime[3]
results.tbl$Dissimilarity.Evenness[i.run] = mean(Sitepair_assessor_results$DissimilarityEvenness)
results.tbl$Min.Dissimilarity[i.run] = mean(Sitepair_assessor_results$DissimilaritySummary[,1])
results.tbl$Q1.Dissimilarity[i.run] =  mean(Sitepair_assessor_results$DissimilaritySummary[,2])
results.tbl$Mdn.Dissimilarity[i.run] =  mean(Sitepair_assessor_results$DissimilaritySummary[,3])
results.tbl$Q3.Dissimilarity[i.run] =  mean(Sitepair_assessor_results$DissimilaritySummary[,5])
results.tbl$Max.Dissimilarity[i.run] =  mean(Sitepair_assessor_results$DissimilaritySummary[,6])
results.tbl$Sites.Geo.Evenness[i.run] = mean(Sitepair_assessor_results$SitesGeoEvenness)
results.tbl$Sitepairs.Geo.Evenness[i.run] = mean(Sitepair_assessor_results$SitepairsGeoEvenness)
results.tbl$Min.Sitepairs.GeoDistance[i.run] = mean(Sitepair_assessor_results$SitepairsGeoDistanceSummary[,1])
results.tbl$Q1.Sitepairs.GeoDistance[i.run] = mean(Sitepair_assessor_results$SitepairsGeoDistanceSummary[,2])
results.tbl$Mdn.Sitepairs.GeoDistance[i.run] = mean(Sitepair_assessor_results$SitepairsGeoDistanceSummary[,3])
results.tbl$Q3.Sitepairs.GeoDistance[i.run] = mean(Sitepair_assessor_results$SitepairsGeoDistanceSummary[,5])
results.tbl$Max.Sitepairs.GeoDistance[i.run] = mean(Sitepair_assessor_results$SitepairsGeoDistanceSummary[,6])
results.tbl$Sites.Env.Evenness[i.run] = mean(Sitepair_assessor_results$SitesEnvEvenness)
results.tbl$Sitepairs.Env.Evenness[i.run] = mean(Sitepair_assessor_results$SitepairsEnvEvenness)
results.tbl$Min.Sitepairs.EnvDistance[i.run] = mean(Sitepair_assessor_results$SitepairsEnvDistanceSummary[,1])
results.tbl$Q1.Sitepairs.EnvDistance[i.run] = mean(Sitepair_assessor_results$SitepairsEnvDistanceSummary[,2])
results.tbl$Mdn.Sitepairs.EnvDistance[i.run] = mean(Sitepair_assessor_results$SitepairsEnvDistanceSummary[,3])
results.tbl$Q3.Sitepairs.EnvDistance[i.run] = mean(Sitepair_assessor_results$SitepairsEnvDistanceSummary[,5])
results.tbl$Max.Sitepairs.EnvDistance[i.run] = mean(Sitepair_assessor_results$SitepairsEnvDistanceSummary[,6])
results.tbl$Min.nTimes.SitesUsedInPairs[i.run] = mean(Sitepair_assessor_results$nTimesSitesUsedInPairs[,1])
results.tbl$Q1.nTimes.SitesUsedInPairs[i.run] = mean(Sitepair_assessor_results$nTimesSitesUsedInPairs[,2])
results.tbl$Mdn.nTimes.SitesUsedInPairs[i.run] = mean(Sitepair_assessor_results$nTimesSitesUsedInPairs[,3])
results.tbl$Q3.nTimes.SitesUsedInPairs[i.run] = mean(Sitepair_assessor_results$nTimesSitesUsedInPairs[,5])
results.tbl$Max.nTimes.SitesUsedInPairs[i.run] = mean(Sitepair_assessor_results$nTimesSitesUsedInPairs[,6])
# remove the results
rm(Sitepair_assessor_results)
}# end if !is.na(f.name)
} # end for i.run
parameter.results.tbl <- cbind(parameter.tbl, results.tbl)
taxa.results.tbl <- smartbind(taxa.results.tbl,parameter.results.tbl)
}# end for i.smp
parameter.results.tbl<-taxa.results.tbl[!is.na(taxa.results.tbl$run.name),]
write.csv(parameter.results.tbl, paste0("//osm-23-cdc/OSM_CBR_LW_DEE_work/processing/biol/",taxa,"/SitePairSampleAssessment/",taxa,"_SampleAssess_Results.csv"), row.names = FALSE)
s.tbl <- NULL
for(
)
i.smp
library(devtools)
library(roxygen2)
library(Rcpp)
pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine'
## Build with devtools
setwd(pkg_root)
# Load libraries
library(gdmEngine)
library(raster)
library(data.table)
library(dplyr)
library(magrittr)
## ESTABLISH KEY INPUTS ------------------------------------------------------------------##
# Read in a spatial raster specifying the domain and resolution to be modelled
Aus.domain.mask <- raster("//ces-10-cdc/OSM_CDC_GISDATA_work/AUS0025/CLIM/MASK/MASK0.flt")
climate.files <- list.files(path = "//lw-osm-02-cdc/OSM_CBR_LW_R51141_GPAA_work/ENV/A/OUT/1990", full.names=TRUE, pattern = ".flt")
terrain.files <- list.files(path = "//lw-osm-02-cdc/OSM_CBR_LW_R51141_GPAA_work/ENV/A/OUT/LAND", full.names=TRUE, pattern = ".flt")
#soil.files <- list.files(path = "//lw-osm-02-cdc/OSM_CBR_LW_HCAS_work/HCAS2.0/HCAS2.0a/ENV/SOIL/TOP", full.names=TRUE, pattern = ".flt")
soil.files <- list.files(path = "//osm-23-cdc/OSM_CBR_LW_DEE_work/source/env/SOIL/TOP", full.names=TRUE, pattern = ".flt")
env.files <- c(climate.files, terrain.files, soil.files)
env.files <- env.files[(substr(env.files, nchar(env.files)-3, nchar(env.files)) == ".flt")] # to remove some arcmap filenames
env.files <- env.files[-c(3,26,29,30,32,33,34,37,38,39,40)] # remove grids we don't want to assess in the modelling
env.stk <- stack(env.files, quick=TRUE) #env.stk <- stack(env.files)
species.names.file <- "//osm-23-cdc/OSM_CBR_LW_DEE_work/source/biol/land_snails/AusLandSnails_ALASpeciesList_9Mar18.csv"
species.names <- read.csv(species.names.file)
species.names <- species.names$Species.Name
species.names <- unique(species.names)
species.records.folder <- "//osm-23-cdc/OSM_CBR_LW_DEE_work/source/biol/land_snails"
species.records.folder.raw <- "//osm-23-cdc/OSM_CBR_LW_DEE_work/source/biol/land_snails/raw_files"
data.processing.folder <- "//osm-23-cdc/OSM_CBR_LW_DEE_work/processing/biol/land_snails"
agg.cell.rad <- 2.25
min.rich.limit <- 2
max.rich.limit <- 50
min.rich.rad <- 50
min.rich.proportion <- 0.25
n.pairs.model <- 50000
train.proportion <- 0.8
n.pairs.test <- 10000
Selected.records <- read.csv("//osm-23-cdc/OSM_CBR_LW_DEE_work/processing/biol/land_snails/selected_gridcell_composition_2018-03-09.csv")
Site.Env.Data <- read.csv("//osm-23-cdc/OSM_CBR_LW_DEE_work/processing/biol/land_snails/site_env_data_2018-03-09.csv")
3525*5
3525*.8
2820*5
3525*.2
705*5
species.names.file <- "//osm-23-cdc/OSM_CBR_LW_DEE_work/source/biol/land_snails/AusLandSnails_ALASpeciesList_9Mar18.csv"
species.names <- read.csv(species.names.file)
species.names <- species.names$Species.Name
species.names <- unique(species.names)
species.records.folder <- "//osm-23-cdc/OSM_CBR_LW_DEE_work/source/biol/land_snails"
species.records.folder.raw <- "//osm-23-cdc/OSM_CBR_LW_DEE_work/source/biol/land_snails/raw_files"
data.processing.folder <- "//osm-23-cdc/OSM_CBR_LW_DEE_work/processing/biol/land_snails"
agg.cell.rad <- 2.25
min.rich.limit <- 2
max.rich.limit <- 50
min.rich.rad <- 50
min.rich.proportion <- 0.25
n.pairs.model <- 14000 # equates to each site used 10 times
train.proportion <- 0.8
n.pairs.test <- 3500   # equates to each site used 10 times
data.processing.folder
ptm <- proc.time()
GDM.Selection <- gdm_builder(site.env.data = Site.Env.Data,
composition.data = Selected.records,
geo=FALSE,
n.pairs.train = n.pairs.model,
n.pairs.test = n.pairs.test,
selection.metric = 'D2',
sample.method = 'geowt',
Indiv.Dev.Explained.Min = 1.0,
n.predictors.min = 5,
domain.mask=Aus.domain.mask,
pcs.projargs="+init=epsg:3577",
bandwidth.geowt=150000,
bandwidth.skip=2,
bandwidth.DistFact=1,
geowt.RndProp=0.05,
output.folder = data.processing.folder,
output.name = "gdm_mod_builder_results_GeowtSamp_noGeo")
proc.time() - ptm
GDM.Selection$Backward.Elim.D2
GDM.Selection$Backward.Elim.Full.D2
# or specify directly, for example:
# final.mod.preds <- c('EPA','WDA','PTX','PHCT','SLTT','ELVR1000','PTOT')
final.mod.preds <- c('WDA','PTX','PTS2','EPI','TXX','SLTT','ELVR1000','CLYT')
geo.in = FALSE
final.model <- gdm_build_single_model(site.env.data = Site.Env.Data,
composition.data = Selected.records,
predictor.names = final.mod.preds,
geo=geo.in,
n.pairs.train = n.pairs.model,
n.pairs.test = n.pairs.test,
sample.method = 'random',
b.used.factor=2,
domain.mask=Aus.domain.mask,
pcs.projargs="+init=epsg:3577",
output.folder = data.processing.folder,
output.name = "gdm_builder_FinMod_RandSamp")
summary(final.model$Mean.Final.GDM)
plot(final.model$Mean.Final.GDM)
final.model$Dissimilarities.Evenness
hist(final.model$Mean.Final.GDM$observed)
final.model2 <- gdm_build_single_model(site.env.data = Site.Env.Data,
composition.data = Selected.records,
predictor.names = final.mod.preds,
geo=geo.in,
n.pairs.train = n.pairs.model,
n.pairs.test = n.pairs.test,
sample.method = 'geowt',
b.used.factor=2,
domain.mask=Aus.domain.mask,
pcs.projargs="+init=epsg:3577",
bandwidth.geowt=150000,
bandwidth.skip=2,
bandwidth.DistFact=1,
geowt.RndProp=0.05,
output.folder = data.processing.folder,
output.name = "gdm_builder_FinMod_GeowtSamp")
library(devtools)
library(roxygen2)
library(Rcpp)
pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine'
DESCRIPTION = c('Package: gdmEngine',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Workflow for GDM',
'Description: Functions used to develop GDMs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: git with shell distribution',
'Licence: errr',
#paste('Authors@R:', unname(Sys.info()['user']))
'Imports:
assertthat,
DescTools,
gdm,
magrittr,
nnls,
matrixStats,
parallel,
plyr,
raster,
Rcpp,
sp,
spatstat,',
'LinkingTo: Rcpp'
)
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
cat(DESCRIPTION, sep = '\n')
sink()
## Build with devtools
setwd(pkg_root)
document()
document()
build()
document()
document()
build()
document()
install(quick = TRUE)
library(spatstat)
install.packages("spatstat")
install.packages("spatstat")
## Build with devtools
setwd(pkg_root)
install(quick = TRUE)
library(devtools)
library(roxygen2)
library(Rcpp)
pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine'
## Build with devtools
setwd(pkg_root)
install(quick = TRUE)
library(spatstat)
install.packages("spatstat")
library(spatstat)
install.packages("spatstat")
library(spatstat)
remove.packages(spatstat)
install.packages("spatstat")
