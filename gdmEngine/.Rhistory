i.from<-i.yr-i.duration
if(i.from<1)
{i.from<-1}
this.mn<-colMeans(clim.record[c(i.from:i.yr),c(2:4)])
clim.run.mn[i.yr,c(2:4)] <- this.mn
}# end for i.yr
# Plot a point
plot(clim.run.mn$year[c(30:nrow(clim.run.mn))],clim.run.mn$pt3[c(30:nrow(clim.run.mn))])
# Make some plots for each place
# point1
min.yr <- 1944#1926
max.yr <- 2014
plot(clim.run.mn$year[c(30:nrow(clim.run.mn))],
clim.run.mn$pt1[c(30:nrow(clim.run.mn))],
main="South Aus",
xlab="year",
ylab="MaxTemp preceeding 30yr mean",
pch=21)
points(clim.run.mn$year[which(clim.run.mn$year == min.yr)],
clim.run.mn$pt1[which(clim.run.mn$year == min.yr)],pch=19,col='green')
points(clim.run.mn$year[which(clim.run.mn$year == max.yr)],
clim.run.mn$pt1[which(clim.run.mn$year == max.yr)],pch=19,col='red')
points(clim.run.mn$year[which(clim.run.mn$year ==2005)],
clim.run.mn$pt1[which(clim.run.mn$year == 2005)],pch=19,col='blue')
# point2
min.yr <- 1980
max.yr <- 2008
plot(clim.run.mn$year[c(30:nrow(clim.run.mn))],
clim.run.mn$pt2[c(30:nrow(clim.run.mn))],
main="Western Vic",
xlab="year",
ylab="MaxTemp preceeding 30yr mean",
pch=21)
points(clim.run.mn$year[which(clim.run.mn$year == min.yr)],
clim.run.mn$pt2[which(clim.run.mn$year == min.yr)],pch=19,col='green')
points(clim.run.mn$year[which(clim.run.mn$year == max.yr)],
clim.run.mn$pt2[which(clim.run.mn$year == max.yr)],pch=19,col='red')
points(clim.run.mn$year[which(clim.run.mn$year ==2005)],
clim.run.mn$pt2[which(clim.run.mn$year == 2005)],pch=19,col='blue')
# point3
min.yr <- 1976
max.yr <- 1998
plot(clim.run.mn$year[c(30:nrow(clim.run.mn))],
clim.run.mn$pt3[c(30:nrow(clim.run.mn))],
main="Eastern Vic",
xlab="year",
ylab="MaxTemp preceeding 30yr mean",
pch=21)
points(clim.run.mn$year[which(clim.run.mn$year == min.yr)],
clim.run.mn$pt3[which(clim.run.mn$year == min.yr)],pch=19,col='green')
points(clim.run.mn$year[which(clim.run.mn$year == max.yr)],
clim.run.mn$pt3[which(clim.run.mn$year == max.yr)],pch=19,col='red')
points(clim.run.mn$year[which(clim.run.mn$year ==2005)],
clim.run.mn$pt3[which(clim.run.mn$year == 2005)],pch=19,col='blue')
# loop through the years, grab maxtemp for each point in each year
clim.record<-data.frame('year'= rep(0,length=103),
'pt1'= rep(0,length=103),
'pt2'= rep(0,length=103),
'pt3'= rep(0,length=103))
this.step<-1
for(i.year in 1915:2017)
{
folder.name <- paste0("Precip_",i.year,"_",i.year,".grd",sep="")
grid.name <- paste0("Precip_",i.year,"_",i.year,".grd.gri",sep="")
this.ras.path <- file.path(clim.dir,folder.name,grid.name)
this.ras <- raster(this.ras.path)
this.pts.dat <- extract(this.ras, survey.pts)
clim.record[this.step,1] <- i.year
clim.record[this.step,c(2:4)] <- this.pts.dat
this.step<-this.step+1
}# end for i.year
# Plot a point
plot(clim.record$year,clim.record$pt1)
# sumarise & plot running mean for previous 20yrs
i.duration<-30
clim.run.mn <- clim.record
for(i.yr in 1:nrow(clim.record))
{
i.from<-i.yr-i.duration
if(i.from<1)
{i.from<-1}
this.mn<-colMeans(clim.record[c(i.from:i.yr),c(2:4)])
clim.run.mn[i.yr,c(2:4)] <- this.mn
}# end for i.yr
# Plot a point
plot(clim.run.mn$year[c(30:nrow(clim.run.mn))],clim.run.mn$pt3[c(30:nrow(clim.run.mn))])
# Make some plots for each place
# point1
min.yr <- 1944#1926
max.yr <- 2014
plot(clim.run.mn$year[c(30:nrow(clim.run.mn))],
clim.run.mn$pt1[c(30:nrow(clim.run.mn))],
main="South Aus",
xlab="year",
ylab="Precip preceeding 30yr mean",
pch=21)
points(clim.run.mn$year[which(clim.run.mn$year == min.yr)],
clim.run.mn$pt1[which(clim.run.mn$year == min.yr)],pch=19,col='green')
points(clim.run.mn$year[which(clim.run.mn$year == max.yr)],
clim.run.mn$pt1[which(clim.run.mn$year == max.yr)],pch=19,col='red')
points(clim.run.mn$year[which(clim.run.mn$year ==2005)],
clim.run.mn$pt1[which(clim.run.mn$year == 2005)],pch=19,col='blue')
# point2
min.yr <- 1980
max.yr <- 2008
plot(clim.run.mn$year[c(30:nrow(clim.run.mn))],
clim.run.mn$pt2[c(30:nrow(clim.run.mn))],
main="Western Vic",
xlab="year",
ylab="Precip preceeding 30yr mean",
pch=21)
points(clim.run.mn$year[which(clim.run.mn$year == min.yr)],
clim.run.mn$pt2[which(clim.run.mn$year == min.yr)],pch=19,col='green')
points(clim.run.mn$year[which(clim.run.mn$year == max.yr)],
clim.run.mn$pt2[which(clim.run.mn$year == max.yr)],pch=19,col='red')
points(clim.run.mn$year[which(clim.run.mn$year ==2005)],
clim.run.mn$pt2[which(clim.run.mn$year == 2005)],pch=19,col='blue')
# point3
min.yr <- 1976
max.yr <- 1998
plot(clim.run.mn$year[c(30:nrow(clim.run.mn))],
clim.run.mn$pt3[c(30:nrow(clim.run.mn))],
main="Eastern Vic",
xlab="year",
ylab="Precip preceeding 30yr mean",
pch=21)
points(clim.run.mn$year[which(clim.run.mn$year == min.yr)],
clim.run.mn$pt3[which(clim.run.mn$year == min.yr)],pch=19,col='green')
points(clim.run.mn$year[which(clim.run.mn$year == max.yr)],
clim.run.mn$pt3[which(clim.run.mn$year == max.yr)],pch=19,col='red')
points(clim.run.mn$year[which(clim.run.mn$year ==2005)],
clim.run.mn$pt3[which(clim.run.mn$year == 2005)],pch=19,col='blue')
plot(this.ras)
i.year<-1950
folder.name <- paste0("Precip_",i.year,"_",i.year,".grd",sep="")
grid.name <- paste0("Precip_",i.year,"_",i.year,".grd.gri",sep="")
this.ras.path <- file.path(clim.dir,folder.name,grid.name)
this.ras <- raster(this.ras.path)
plot(this.ras)
i.year<-1951
folder.name <- paste0("Precip_",i.year,"_",i.year,".grd",sep="")
grid.name <- paste0("Precip_",i.year,"_",i.year,".grd.gri",sep="")
this.ras.path <- file.path(clim.dir,folder.name,grid.name)
this.ras <- raster(this.ras.path)
plot(this.ras)
summary(clim.run.mn$pt3[c(30:nrow(clim.run.mn))])
library(devtools)
library(roxygen2)
library(Rcpp)
pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine'
## write DESCRIPTION file
DESCRIPTION = c('Package: gdmEngine',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Workflow for GDM',
'Description: Functions used to develop GDMs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: git with shell distribution',
'Licence: errr',
#paste('Authors@R:', unname(Sys.info()['user']))
'Imports: Rcpp (>= 0.11.4)',
'LinkingTo: Rcpp'
)
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
cat(DESCRIPTION, sep = '\n')
sink()
## Build with devtools
setwd(pkg_root)
document()
build()
install(quick = TRUE)
pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine'
## write DESCRIPTION file
DESCRIPTION = c('Package: gdmEngine',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Workflow for GDM',
'Description: Functions used to develop GDMs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: git with shell distribution',
'Licence: errr',
#paste('Authors@R:', unname(Sys.info()['user']))
'Imports: Rcpp (>= 0.11.4)',
'LinkingTo: Rcpp'
)
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
cat(DESCRIPTION, sep = '\n')
sink()
## Build with devtools
setwd(pkg_root)
document()
build()
install(quick = TRUE)
pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine'
## write DESCRIPTION file
DESCRIPTION = c('Package: gdmEngine',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Workflow for GDM',
'Description: Functions used to develop GDMs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: git with shell distribution',
'Licence: errr',
#paste('Authors@R:', unname(Sys.info()['user']))
'Imports: Rcpp (>= 0.11.4)',
'LinkingTo: Rcpp'
)
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
cat(DESCRIPTION, sep = '\n')
sink()
## Build with devtools
setwd(pkg_root)
document()
build()
install(quick = TRUE)
library(gdmEngine)
# Load libraries
library(ALA4R)
library(raster)
library(gdmEngine)
library(data.table)
library(foreach)
library(doParallel)
#library(dplyr)
Aus.domain.mask <- raster("//ces-10-cdc/OSM_CDC_GISDATA_work/AUS0025/CLIM/MASK/MASK0.flt")
# SPECIFY ALA DATA FILTERING THRESHOLDS
data.start.year = 1970
location.uncertainty.limit = 2000
# Specify Environmental layers
climate.files <- list.files(path = "//lw-osm-02-cdc/OSM_CBR_LW_R51141_GPAA_work/ENV/A/OUT/1990", full.names=TRUE, pattern = ".flt")
terrain.files <- list.files(path = "//lw-osm-02-cdc/OSM_CBR_LW_R51141_GPAA_work/ENV/A/OUT/LAND", full.names=TRUE, pattern = ".flt")
env.files <- c(climate.files, terrain.files)
env.files <- env.files[(substr(env.files, nchar(env.files)-3, nchar(env.files)) == ".flt")] # to remove some arcmap filenames
env.files <- env.files[-c(20,21,32,35,36,38,39,40,43,44,45,46)] # remove grids we don't want to assess in the modelling
env.stk <- stack(env.files)
# REPTILE INPUTS
species.names.file <- "//osm-23-cdc/OSM_CBR_LW_DEE_work/source/biol/reptiles/AFD-20171211T113438.csv"
species.names <- read.csv(species.names.file)
species.names <- paste(species.names$GENUS, species.names$SPECIES)
species.names <- unique(species.names)
species.records.folder <- "//osm-23-cdc/OSM_CBR_LW_DEE_work/source/biol/reptiles"
species.records.folder.raw <- "//osm-23-cdc/OSM_CBR_LW_DEE_work/source/biol/reptiles/raw_files"
data.processing.folder <- "//osm-23-cdc/OSM_CBR_LW_DEE_work/processing/biol/reptiles"
agg.cell.rad <- 2.25
min.rich.limit <- 3
max.rich.limit <- 50
min.rich.rad <- 200
min.rich.proportion <- 0.25
n.pairs.model <- 100000
train.proportion <- 0.8
Selected.records <- read.csv("//osm-23-cdc/OSM_CBR_LW_DEE_work/processing/biol/reptiles/selected_gridcell_composition_2018-03-15.csv")
Site.Env.Data <- read.csv("//osm-23-cdc/OSM_CBR_LW_DEE_work/processing/biol/reptiles/site_env_data_2018-03-15.csv")
gitr.push(files = 'all')
taxa <- "reptiles"
#### PARAMETERS FOR RANDOM ####
parameter.tbl <- expand.grid(p.sample.method='random',
p.n.pairs.per.site=c(5,10,20),
p.b.used.factor=c(0.1,0.5,1,2,3,4,5),
stringsAsFactors=FALSE)
parameter.tbl<-unique(parameter.tbl)
parameter.tbl$run.name<-paste0(taxa,"_",parameter.tbl$p.sample.method,"_",c(1:nrow(parameter.tbl))) ## **CHANGE FOR EACH TAXA**
analysis.out.folder<-paste0("//osm-23-cdc/OSM_CBR_LW_DEE_work/processing/biol/",taxa,"/SitePairSampleAssessment/",parameter.tbl$p.sample.method[1])  ## **CHANGE FOR EACH TAXA**
write.csv(parameter.tbl,paste0(analysis.out.folder,"/",taxa,"_parameters_",parameter.tbl$p.sample.method[1],".csv"),row.names = FALSE) ## **CHANGE FOR EACH TAXA**
cl<-makeCluster(12) #setup parallel backend to use 12 processors
registerDoParallel(cl)
foreach(i.run=1:nrow(parameter.tbl), .packages='gdmEngine') %dopar% {
this.sample <- sitepair_sample_assessor(site.env.data = Site.Env.Data,
composition.data = Selected.records ,
n.pairs.per.site = parameter.tbl$p.n.pairs.per.site[i.run],
n.crossvalid.tests = 3,
sample.method = parameter.tbl$p.sample.method[i.run],
b.used.factor=parameter.tbl$p.b.used.factor[i.run],
domain.mask=Aus.domain.mask,
pcs.projargs="+init=epsg:3577",
output.folder = analysis.out.folder,
output.name = parameter.tbl$run.name[i.run])
} # end for i.run
stopCluster(cl)
#### PARAMETERS FOR GEODIST ####
parameter.tbl <- expand.grid(p.sample.method='geodist',
p.n.pairs.per.site=c(5,10,20),
p.b.used.factor=c(0.1,0.5,1,2,3,4,5),
p.b.dpair.factor=c(0.1,0.5,1,2,3,4,5),
stringsAsFactors=FALSE)
parameter.tbl<-unique(parameter.tbl)
parameter.tbl$run.name<-paste0(taxa,"_",parameter.tbl$p.sample.method,"_",c(1:nrow(parameter.tbl))) ## **CHANGE FOR EACH TAXA**
analysis.out.folder<-paste0("//osm-23-cdc/OSM_CBR_LW_DEE_work/processing/biol/",taxa,"/SitePairSampleAssessment/",parameter.tbl$p.sample.method[1])  ## **CHANGE FOR EACH TAXA**
write.csv(parameter.tbl,paste0(analysis.out.folder,"/",taxa,"_parameters_",parameter.tbl$p.sample.method[1],".csv"),row.names = FALSE) ## **CHANGE FOR EACH TAXA**
# run the parallel loop over parameter combinations
cl<-makeCluster(12) #setup parallel backend to use 12 processors
registerDoParallel(cl)
foreach(i.run=1:nrow(parameter.tbl), .packages='gdmEngine') %dopar% {
this.sample <- sitepair_sample_assessor(site.env.data = Site.Env.Data,
composition.data = Selected.records ,
n.pairs.per.site = parameter.tbl$p.n.pairs.per.site[i.run],
n.crossvalid.tests = 3,
sample.method = parameter.tbl$p.sample.method[i.run],
b.used.factor=parameter.tbl$p.b.used.factor[i.run],
b.dpair.factor=parameter.tbl$p.b.dpair.factor[i.run],
domain.mask=Aus.domain.mask,
pcs.projargs="+init=epsg:3577",
output.folder = analysis.out.folder,
output.name = parameter.tbl$run.name[i.run])
} # end for i.run
stopCluster(cl)
#### PARAMETERS FOR ENVDIST ####
parameter.tbl <- expand.grid(p.sample.method='envdist',
p.n.pairs.per.site=c(5,10,20),
p.b.used.factor=c(0.1,0.5,1,2,3,4,5),
p.b.epair.factor=c(0.1,0.5,1,2,3,4,5),
stringsAsFactors=FALSE)
parameter.tbl<-unique(parameter.tbl)
parameter.tbl$run.name<-paste0(taxa,"_",parameter.tbl$p.sample.method,"_",c(1:nrow(parameter.tbl))) ## **CHANGE FOR EACH TAXA**
analysis.out.folder<-paste0("//osm-23-cdc/OSM_CBR_LW_DEE_work/processing/biol/",taxa,"/SitePairSampleAssessment/",parameter.tbl$p.sample.method[1])  ## **CHANGE FOR EACH TAXA**
write.csv(parameter.tbl,paste0(analysis.out.folder,"/",taxa,"_parameters_",parameter.tbl$p.sample.method[1],".csv"),row.names = FALSE) ## **CHANGE FOR EACH TAXA**
# run the parallel loop over parameter combinations
cl<-makeCluster(12) #setup parallel backend to use 12 processors
registerDoParallel(cl)
foreach(i.run=1:nrow(parameter.tbl), .packages='gdmEngine') %dopar% {
this.sample <- sitepair_sample_assessor(site.env.data = Site.Env.Data,
composition.data = Selected.records ,
n.pairs.per.site = parameter.tbl$p.n.pairs.per.site[i.run],
n.crossvalid.tests = 3,
sample.method = parameter.tbl$p.sample.method[i.run],
b.used.factor=parameter.tbl$p.b.used.factor[i.run],
b.epair.factor=parameter.tbl$p.b.epair.factor[i.run],
domain.mask=Aus.domain.mask,
pcs.projargs="+init=epsg:3577",
output.folder = analysis.out.folder,
output.name = parameter.tbl$run.name[i.run])
} # end for i.run
stopCluster(cl)
#### PARAMETERS FOR GEODENS ####
parameter.tbl <- expand.grid(p.sample.method='geodens',
p.n.pairs.per.site=c(5,10,20),
p.b.used.factor=c(0.1,0.5,1,2,3,4,5),
p.sigma.spair=c(0.25,0.5,1.0,1.5,2),
p.b.spair.factor=c(0.25,0.5,1,2,4),
stringsAsFactors=FALSE)
parameter.tbl<-unique(parameter.tbl)
parameter.tbl$run.name<-paste0(taxa,"_",parameter.tbl$p.sample.method,"_",c(1:nrow(parameter.tbl))) ## **CHANGE FOR EACH TAXA**
analysis.out.folder<-paste0("//osm-23-cdc/OSM_CBR_LW_DEE_work/processing/biol/",taxa,"/SitePairSampleAssessment/",parameter.tbl$p.sample.method[1])  ## **CHANGE FOR EACH TAXA**
write.csv(parameter.tbl,paste0(analysis.out.folder,"/",taxa,"_parameters_",parameter.tbl$p.sample.method[1],".csv"),row.names = FALSE) ## **CHANGE FOR EACH TAXA**
# run the parallel loop over parameter combinations
cl<-makeCluster(12) #setup parallel backend to use 12 processors
registerDoParallel(cl)
foreach(i.run=1:nrow(parameter.tbl), .packages='gdmEngine') %dopar% {
this.sample <- sitepair_sample_assessor(site.env.data = Site.Env.Data,
composition.data = Selected.records ,
n.pairs.per.site = parameter.tbl$p.n.pairs.per.site[i.run],
n.crossvalid.tests = 3,
sample.method = parameter.tbl$p.sample.method[i.run],
b.used.factor=parameter.tbl$p.b.used.factor[i.run],
sigma.spair=parameter.tbl$p.sigma.spair[i.run],
spair.factor=parameter.tbl$p.b.spair.factor[i.run],
domain.mask=Aus.domain.mask,
pcs.projargs="+init=epsg:3577",
output.folder = analysis.out.folder,
output.name = parameter.tbl$run.name[i.run])
} # end for i.run
stopCluster(cl)
#### PARAMETERS FOR GEOWT ####
parameter.tbl <- expand.grid(p.sample.method='geowt',
p.n.pairs.per.site=c(5,10,20),
p.bandwidth.geowt=c(100000,150000,200000,300000,400000),
p.bandwidth.skip=c(1,2,3,4),
p.bandwidth.DistFact=c(0.5,1,1.5,2),
p.geowt.RndProp=c(0.01,0.05,0.1,0.2),
stringsAsFactors=FALSE)
parameter.tbl<-unique(parameter.tbl)
parameter.tbl$run.name<-paste0(taxa,"_",parameter.tbl$p.sample.method,"_",c(1:nrow(parameter.tbl))) ## **CHANGE FOR EACH TAXA**
analysis.out.folder<-paste0("//osm-23-cdc/OSM_CBR_LW_DEE_work/processing/biol/",taxa,"/SitePairSampleAssessment/",parameter.tbl$p.sample.method[1])  ## **CHANGE FOR EACH TAXA**
write.csv(parameter.tbl,paste0(analysis.out.folder,"/",taxa,"_parameters_",parameter.tbl$p.sample.method[1],".csv"),row.names = FALSE) ## **CHANGE FOR EACH TAXA**
#  for parallel implementation...
cl<-makeCluster(12) #setup parallel backend to use 12 processors
registerDoParallel(cl)
# run the parallel loop over parameter combinations
foreach(i.run=1:nrow(parameter.tbl), .packages='gdmEngine') %dopar% {
this.sample <- sitepair_sample_assessor(site.env.data = Site.Env.Data,
composition.data = Selected.records ,
n.pairs.per.site = parameter.tbl$p.n.pairs.per.site[i.run],
n.crossvalid.tests = 3,
sample.method = parameter.tbl$p.sample.method[i.run],
domain.mask=Aus.domain.mask,
pcs.projargs="+init=epsg:3577",
bandwidth.geowt=parameter.tbl$p.bandwidth.geowt[i.run],
bandwidth.skip=parameter.tbl$p.bandwidth.skip[i.run],
bandwidth.DistFact=parameter.tbl$p.bandwidth.DistFact[i.run],
geowt.RndProp=parameter.tbl$p.geowt.RndProp[i.run],
output.folder = analysis.out.folder,
output.name = parameter.tbl$run.name[i.run])
} # end for i.run
stopCluster(cl)
install.packages("rmarkdown")
library(rmarkdown)
climate.files <- list.files(path = "//lw-osm-02-cdc/OSM_CBR_LW_R51141_GPAA_work/ENV/A/OUT/1990", full.names=TRUE, pattern = ".flt")
terrain.files <- list.files(path = "//lw-osm-02-cdc/OSM_CBR_LW_R51141_GPAA_work/ENV/A/OUT/LAND", full.names=TRUE, pattern = ".flt")
#soil.files <- list.files(path = "//lw-osm-02-cdc/OSM_CBR_LW_HCAS_work/HCAS2.0/HCAS2.0a/ENV/SOIL/TOP", full.names=TRUE, pattern = ".flt")
soil.files <- list.files(path = "//osm-23-cdc/OSM_CBR_LW_DEE_work/source/env/SOIL/TOP", full.names=TRUE, pattern = ".flt")
env.files <- c(climate.files, terrain.files, soil.files)
env.files <- env.files[(substr(env.files, nchar(env.files)-3, nchar(env.files)) == ".flt")] # to remove some arcmap filenames
env.files
## ESTABLISH KEY INPUTS ------------------------------------------------------------------##
# Read in a spatial raster specifying the domain and resolution to be modelled
Aus.domain.mask <- raster("//ces-10-c$dc/OSM_CDC_GISDATA_work/AUS0025/CLIM/MASK/MASK0.flt")
## ESTABLISH KEY INPUTS ------------------------------------------------------------------##
# Read in a spatial raster specifying the domain and resolution to be modelled
Aus.domain.mask <- raster("//ces-10-c$dc/OSM_CDC_GISDATA_work/AUS0025/CLIM/MASK/MASK0.flt")
library(raster)
## ESTABLISH KEY INPUTS ------------------------------------------------------------------##
# Read in a spatial raster specifying the domain and resolution to be modelled
Aus.domain.mask <- raster("//ces-10-c$dc/OSM_CDC_GISDATA_work/AUS0025/CLIM/MASK/MASK0.flt")
## ESTABLISH KEY INPUTS ------------------------------------------------------------------##
# Read in a spatial raster specifying the domain and resolution to be modelled
Aus.domain.mask <- raster("//ces-10-cdc/OSM_CDC_GISDATA_work/AUS0025/CLIM/MASK/MASK0.flt")
climate.files <- list.files(path = "//lw-osm-02-cdc/OSM_CBR_LW_R51141_GPAA_work/ENV/A/OUT/1990", full.names=TRUE, pattern = ".flt")
terrain.files <- list.files(path = "//lw-osm-02-cdc/OSM_CBR_LW_R51141_GPAA_work/ENV/A/OUT/LAND", full.names=TRUE, pattern = ".flt")
#soil.files <- list.files(path = "//lw-osm-02-cdc/OSM_CBR_LW_HCAS_work/HCAS2.0/HCAS2.0a/ENV/SOIL/TOP", full.names=TRUE, pattern = ".flt")
soil.files <- list.files(path = "//osm-23-cdc/OSM_CBR_LW_DEE_work/source/env/SOIL/TOP", full.names=TRUE, pattern = ".flt")
env.files <- c(climate.files, terrain.files, soil.files)
env.files <- env.files[(substr(env.files, nchar(env.files)-3, nchar(env.files)) == ".flt")] # to remove some arcmap filenames
env.files <- env.files[-c(3,11,12,26,29,30,31,32,33,34,37,38,39,40)] # remove grids we don't want to assess in the modelling
env.stk <- stack(env.files, quick=TRUE) #env.stk <- stack(env.files)
names(env.stk)
species.names.file <- "//osm-23-cdc/OSM_CBR_LW_DEE_work/source/biol/vascular_plants/APC_and_Orchid_SpeciesNames.csv"
species.names <- read.csv(species.names.file)
species.names <- as.character(species.names[,1])
species.records.folder <- "//osm-23-cdc/OSM_CBR_LW_DEE_work/source/biol/vascular_plants"
species.records.folder.raw <- "//osm-23-cdc/OSM_CBR_LW_DEE_work/source/biol/vascular_plants/raw_files"
data.processing.folder <- "//osm-23-cdc/OSM_CBR_LW_DEE_work/processing/biol/vascular_plants"
agg.cell.rad <- 2.25
min.rich.limit <- 10
max.rich.limit <- 400
min.rich.rad <- 200
min.rich.proportion <- 0.25
n.pairs.model <- 144000 # equates to each site used 10 times
train.proportion <- 0.8
n.pairs.test <- 36000   # equates to each site used 10 times
##TEMP##
#AMPHIBIANS -------
#Selected.records <- read.csv("//osm-23-cdc/OSM_CBR_LW_DEE_work/processing/biol/amphibians/selected_gridcell_composition_2018-03-05.csv")
#Site.Env.Data <- read.csv("//osm-23-cdc/OSM_CBR_LW_DEE_work/processing/biol/amphibians/site_env_data_2018-03-05.csv")
#VASCULAR PLANTS -------
Selected.records <- read.csv("//osm-23-cdc/OSM_CBR_LW_DEE_work/processing/biol/vascular_plants/selected_gridcell_composition_2018-03-07.csv")
Site.Env.Data <- extract_env_data(ALA.composition.data = Selected.records,
environment.stk = env.stk,
output.folder = data.processing.folder)
ptm <- proc.time()
GDM.Selection <- gdm_builder(site.env.data = Site.Env.Data,
composition.data = Selected.records,
geo=FALSE,
n.pairs.train = n.pairs.model,
n.pairs.test = n.pairs.test,
selection.metric = 'D2',
sample.method = 'geowt',
Indiv.Dev.Explained.Min = 1.0,
n.predictors.min = 5,
domain.mask=Aus.domain.mask,
pcs.projargs="+init=epsg:3577",
bandwidth.geowt=150000,
bandwidth.skip=2,
bandwidth.DistFact=1,
geowt.RndProp=0.05,
output.folder = data.processing.folder,
output.name = "gdm_mod_builder_results_GeowtSamp_noGeo_V3")
proc.time() - ptm
GDM.Selection$Backward.Elim.D2
n.pairs.model
GDM.Selection$Backward.Elim.Full.D2
geo.in = FALSE
# or specify directly, for example:
# final.mod.preds <- c('EPA','WDA','PTX','PHCT','SLTT','ELVR1000','PTOT')
final.mod.preds <- c('WDA','TXM','PTX','ELVR1000','SNDT','ECET','TNI','PTOT')
pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine'
pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine'
## write DESCRIPTION file
DESCRIPTION = c('Package: gdmEngine',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Workflow for GDM',
'Description: Functions used to develop GDMs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: git with shell distribution',
'Licence: errr',
#paste('Authors@R:', unname(Sys.info()['user']))
'Imports:
assertthat,
DescTools,
gdm,
magrittr,
nnls,
matrixStats,
parallel,
plyr,
raster,
Rcpp,
sp,
spatstat,' #,
#'LinkingTo: Rcpp'
)
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
cat(DESCRIPTION, sep = '\n')
sink()
## Build with devtools
setwd(pkg_root)
document()
build()
install(quick = TRUE)
