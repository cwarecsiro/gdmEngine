"C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/jan_rad_2010_1km",
"C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/mintempjuly_2010_1km",
"C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/recip_pet_ratio_2010_1km"))
close(fileConn)
out.filepath="C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/GDM_workshop/GDM_Modeller_Param_File.txt"
fileConn<-file(out.filepath)
writeLines("#######################################################################",fileConn)
writeLines("###",fileConn)
writeLines(paste0("### GDM .NET Parameter file: ",out.filepath),fileConn)
writeLines("###",fileConn)
writeLines(paste0("### ",model$creationdate),fileConn)
writeLines("###",fileConn)
writeLines("",fileConn)
writeLines("",fileConn)
close(fileConn)
fileConn<-file(out.filepath)
writeLines("#######################################################################",fileConn)
close(fileConn)
fileConn<-file(out.filepath)
writeLines("#######################################################################",fileConn)
writeLines("###",fileConn)
writeLines(paste0("### GDM .NET Parameter file: ",out.filepath),fileConn)
close(fileConn)
fileConn<-file(out.filepath)
writeLines("#######################################################################",fileConn)
writeLines("###",fileConn)
close(fileConn)
write.gdm.param.file<-function(model, # a gdm model object
in.filepath,      # an input folderpath - where all the input grids and model object is stored
out.filepath,     # an output folderpath - where the param file will be written to
domain.filepath,  # an output folderpath
EnvGrids.filepaths)        # a list of strings holding the paths to the env grids for the predictors (in order)
{
# open the file connection
fileConn<-file(out.filepath,'w')
# write out lines of text
writeLines("#######################################################################",con = fileConn)
writeLines("###",con = fileConn)
writeLines(paste0("### GDM .NET Parameter file: ",out.filepath),con = fileConn)
writeLines("###",con = fileConn)
writeLines(paste0("### ",model$creationdate),con = fileConn)
writeLines("###",con = fileConn)
writeLines("",con = fileConn)
writeLines("",con = fileConn)
writeLines("[PROCESS]",con = fileConn)
writeLines("DoModelling=1",con = fileConn)
writeLines("DoTransform=1",con = fileConn)
writeLines("DoClassify=0",con = fileConn)
writeLines("DoColoring=0",con = fileConn)
writeLines("DoPredict=0",con = fileConn)
writeLines("",con = fileConn)
writeLines("",con = fileConn)
writeLines("[GDMODEL]",con = fileConn)
writeLines(paste0("WorkspacePath=",in.filepath),con = fileConn)
if(model$geo)
{writeLines("UseEuclidean=1",con = fileConn)}
if(!model$geo)
{writeLines("UseEuclidean=0",con = fileConn)}
writeLines("UseSubSample=0",con = fileConn)
writeLines("NumSamples=0",con = fileConn)
writeLines(paste0("Intercept=",model$intercept),con = fileConn)
writeLines(paste0("NullDeviance=",model$nulldeviance),con = fileConn)
writeLines(paste0("GDMDeviance=",model$gdmdeviance),con = fileConn)
writeLines(paste0("DevExplained=",model$explained),con = fileConn)
writeLines(paste0("SumOfCoefficients=",sum(model$coefficients)),con = fileConn)
writeLines(paste0("NumberOfActivePredictors=",length(model$predictors)),con = fileConn)
writeLines(paste0("NumberCoefficients>0=",sum(model$coefficients>0)),con = fileConn)
writeLines(paste0("NumberSitePairs=",model$sample),con = fileConn)
writeLines("",con = fileConn)
writeLines("[RESPONSE]",con = fileConn)
writeLines(paste0("InputData=",in.filepath,"/GDM_Input_Table_not_used.csv"),con = fileConn)
writeLines("",con = fileConn)
writeLines("",con = fileConn)
writeLines("[PREDICTORS]",con = fileConn)
writeLines(paste0("DomainGrid=",domain.filepath),con = fileConn)
if(model$geo)
{writeLines(paste0("NumPredictors=",(length(model$predictors)-1)),con = fileConn)}
if(!model$geo)
{writeLines(paste0("NumPredictors=",length(model$predictors)),con = fileConn)}
writeLines("",con = fileConn)
writeLines("",con = fileConn)
for(i.var in 1:length(model$predictors))
{
writeLines(paste0("UseEnv",i.var,"=1"),con = fileConn)
}#end for i.var
writeLines("",con = fileConn)
writeLines("",con = fileConn)
if(model$geo)
{
writeLines(paste0("EuclSpl=",model$splines[1]),con = fileConn)
for(i.spl in 1:model$splines[1])
{
writeLines(paste0("EuclSplVal",i.spl,"=",model$knots[i.spl]),con = fileConn)
}# end for i.spl
for(i.spl in 1:model$splines[1])
{
writeLines(paste0("EuclCoef",i.spl,"=",model$coefficients[i.spl]),con = fileConn)
}# end for i.spl
writeLines("EuclQuantType=0",con = fileConn)
} # end if model$geo
if(!model$geo)
{
writeLines("EuclSpl=0",con = fileConn)
} # end if !model$geo
writeLines("",con = fileConn)
writeLines("",con = fileConn)
add.val<-0
skip.vals<-0
if(model$geo)
{
add.val<-1
skip.vals<-model$splines[1]
} #end if (model$geo)
for(i.spl in 1:(length(model$predictors)-add.val))
{
writeLines(paste0("PredSpl",i.spl,"=",model$splines[(i.spl+add.val)]),con = fileConn)
}# end for i.spl
writeLines("",con = fileConn)
writeLines("",con = fileConn)
for(i.spl in 1:(length(model$predictors)-add.val))
{
writeLines(paste0("QuantType",i.spl,"=0"),con = fileConn)
}# end for i.spl
writeLines("",con = fileConn)
writeLines("",con = fileConn)
for(i.spl in 1:(length(model$predictors)-add.val))
{
writeLines(paste0("EnvGrid",i.spl,"=",EnvGrids.filepaths[i.spl]),con = fileConn)
}# end for i.spl
writeLines("",con = fileConn)
writeLines("",con = fileConn)
for(i.spl in 1:(length(model$predictors)-add.val))
{
writeLines(paste0("PredType",i.spl,"=0"),con = fileConn)
}# end for i.spl
upto.index.knt<-1
upto.index.cof<-1
for(i.prd in 1:(length(model$predictors)-add.val))
{
for(i.spl in 1:model$splines[(i.spl+add.val)])
{
writeLines(paste0("PredSplVal",i.prd,".",i.spl,"=",model$knots[(upto.index.knt+skip.vals)]),con = fileConn)
upto.index.knt<-upto.index.knt+1
}# end for i.knt
for(i.spl in 1:model$splines[(i.spl+add.val)])
{
writeLines(paste0("PredCoef",i.prd,".",i.spl,"=",model$coefficients[(upto.index.cof+skip.vals)]),con = fileConn)
upto.index.cof<-upto.index.cof+1
}# end for i.knt
writeLines("",con = fileConn)
}# end for i.spl
writeLines("",con = fileConn)
writeLines("[TRANSPREDS]",con = fileConn)
if(model$geo)
{
writeLines(paste0("EuclXTran=",file.path(in.filepath,"gdmXtran")),con = fileConn)
writeLines(paste0("EuclYTran=",file.path(in.filepath,"gdmYtran")),con = fileConn)
}# end if model$geo
for(i.prd in 1:(length(model$predictors)-add.val))
{
writeLines(paste0("PredTran",i.prd,"=",EnvGrids.filepaths[i.prd],"Tran"),con = fileConn)
}# end for i.prd
writeLines("",con = fileConn)
# close file connection
close(fileConn)
} # end write.gdm.param.file ##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
write.gdm.param.file(model=model, # a gdm model object
in.filepath="C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016",
out.filepath="C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/GDM_workshop/GDM_Modeller_Param_File.txt",
domain.filepath="C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/DomainGrid",
EnvGrids.filepaths=c("C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/bulkdensity_1km",
"C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/isothermality_2010_1km",
"C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/jan_rad_2010_1km",
"C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/mintempjuly_2010_1km",
"C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/recip_pet_ratio_2010_1km"))
close(fileConn)
fileConn<-file(out.filepath,'w')
# write out lines of text
writeLines("#######################################################################",con = fileConn)
writeLines("###",con = fileConn)
writeLines(paste0("### GDM .NET Parameter file: ",out.filepath),con = fileConn)
writeLines("###",con = fileConn)
writeLines(paste0("### ",model$creationdate),con = fileConn)
writeLines("###",con = fileConn)
writeLines("",con = fileConn)
writeLines("",con = fileConn)
writeLines("[PROCESS]",con = fileConn)
writeLines("DoModelling=1",con = fileConn)
writeLines("DoTransform=1",con = fileConn)
writeLines("DoClassify=0",con = fileConn)
writeLines("DoColoring=0",con = fileConn)
writeLines("DoPredict=0",con = fileConn)
writeLines("",con = fileConn)
writeLines("",con = fileConn)
writeLines("[GDMODEL]",con = fileConn)
writeLines(paste0("WorkspacePath=",in.filepath),con = fileConn)
if(model$geo)
{writeLines("UseEuclidean=1",con = fileConn)}
if(!model$geo)
{writeLines("UseEuclidean=0",con = fileConn)}
writeLines("UseSubSample=0",con = fileConn)
writeLines("NumSamples=0",con = fileConn)
writeLines(paste0("Intercept=",model$intercept),con = fileConn)
writeLines(paste0("NullDeviance=",model$nulldeviance),con = fileConn)
writeLines(paste0("GDMDeviance=",model$gdmdeviance),con = fileConn)
writeLines(paste0("DevExplained=",model$explained),con = fileConn)
writeLines(paste0("SumOfCoefficients=",sum(model$coefficients)),con = fileConn)
writeLines(paste0("NumberOfActivePredictors=",length(model$predictors)),con = fileConn)
writeLines(paste0("NumberCoefficients>0=",sum(model$coefficients>0)),con = fileConn)
writeLines(paste0("NumberSitePairs=",model$sample),con = fileConn)
writeLines("",con = fileConn)
writeLines("[RESPONSE]",con = fileConn)
writeLines(paste0("InputData=",in.filepath,"/GDM_Input_Table_not_used.csv"),con = fileConn)
writeLines("",con = fileConn)
writeLines("",con = fileConn)
writeLines("[PREDICTORS]",con = fileConn)
writeLines(paste0("DomainGrid=",domain.filepath),con = fileConn)
if(model$geo)
{writeLines(paste0("NumPredictors=",(length(model$predictors)-1)),con = fileConn)}
if(!model$geo)
{writeLines(paste0("NumPredictors=",length(model$predictors)),con = fileConn)}
writeLines("",con = fileConn)
writeLines("",con = fileConn)
for(i.var in 1:length(model$predictors))
{
writeLines(paste0("UseEnv",i.var,"=1"),con = fileConn)
}#end for i.var
writeLines("",con = fileConn)
writeLines("",con = fileConn)
if(model$geo)
{
writeLines(paste0("EuclSpl=",model$splines[1]),con = fileConn)
for(i.spl in 1:model$splines[1])
{
writeLines(paste0("EuclSplVal",i.spl,"=",model$knots[i.spl]),con = fileConn)
}# end for i.spl
for(i.spl in 1:model$splines[1])
{
writeLines(paste0("EuclCoef",i.spl,"=",model$coefficients[i.spl]),con = fileConn)
}# end for i.spl
writeLines("EuclQuantType=0",con = fileConn)
} # end if model$geo
if(!model$geo)
{
writeLines("EuclSpl=0",con = fileConn)
} # end if !model$geo
writeLines("",con = fileConn)
writeLines("",con = fileConn)
add.val<-0
skip.vals<-0
if(model$geo)
{
add.val<-1
skip.vals<-model$splines[1]
} #end if (model$geo)
for(i.spl in 1:(length(model$predictors)-add.val))
{
writeLines(paste0("PredSpl",i.spl,"=",model$splines[(i.spl+add.val)]),con = fileConn)
}# end for i.spl
writeLines("",con = fileConn)
writeLines("",con = fileConn)
for(i.spl in 1:(length(model$predictors)-add.val))
{
writeLines(paste0("QuantType",i.spl,"=0"),con = fileConn)
}# end for i.spl
writeLines("",con = fileConn)
writeLines("",con = fileConn)
for(i.spl in 1:(length(model$predictors)-add.val))
{
writeLines(paste0("EnvGrid",i.spl,"=",EnvGrids.filepaths[i.spl]),con = fileConn)
}# end for i.spl
writeLines("",con = fileConn)
writeLines("",con = fileConn)
for(i.spl in 1:(length(model$predictors)-add.val))
{
writeLines(paste0("PredType",i.spl,"=0"),con = fileConn)
}# end for i.spl
upto.index.knt<-1
upto.index.cof<-1
for(i.prd in 1:(length(model$predictors)-add.val))
{
for(i.spl in 1:model$splines[(i.spl+add.val)])
{
writeLines(paste0("PredSplVal",i.prd,".",i.spl,"=",model$knots[(upto.index.knt+skip.vals)]),con = fileConn)
upto.index.knt<-upto.index.knt+1
}# end for i.knt
for(i.spl in 1:model$splines[(i.spl+add.val)])
{
writeLines(paste0("PredCoef",i.prd,".",i.spl,"=",model$coefficients[(upto.index.cof+skip.vals)]),con = fileConn)
upto.index.cof<-upto.index.cof+1
}# end for i.knt
writeLines("",con = fileConn)
}# end for i.spl
writeLines("",con = fileConn)
writeLines("[TRANSPREDS]",con = fileConn)
if(model$geo)
{
writeLines(paste0("EuclXTran=",file.path(in.filepath,"gdmXtran")),con = fileConn)
writeLines(paste0("EuclYTran=",file.path(in.filepath,"gdmYtran")),con = fileConn)
}# end if model$geo
for(i.prd in 1:(length(model$predictors)-add.val))
{
writeLines(paste0("PredTran",i.prd,"=",EnvGrids.filepaths[i.prd],"Tran"),con = fileConn)
}# end for i.prd
writeLines("",con = fileConn)
# close file connection
close(fileConn)
model<-load("C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/GDM_workshop/GDM_Model_object.Rdata")
model<-model.1
write.gdm.param.file(model=model, # a gdm model object
in.filepath="C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016",
out.filepath="C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/GDM_workshop/GDM_Modeller_Param_File.txt",
domain.filepath="C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/DomainGrid",
EnvGrids.filepaths=c("C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/bulkdensity_1km",
"C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/isothermality_2010_1km",
"C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/jan_rad_2010_1km",
"C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/mintempjuly_2010_1km",
"C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/recip_pet_ratio_2010_1km"))
write.gdm.param.file(model=model, # a gdm model object
in.filepath="C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016",
out.filepath="C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/GDM_workshop/GDM_Modeller_Param_File.txt",
domain.filepath="C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/DomainGrid",
EnvGrids.filepaths=c("C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/bulkdensity_1km",
"C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/isothermality_2010_1km",
"C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/jan_rad_2010_1km",
"C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/mintempjuly_2010_1km",
"C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/recip_pet_ratio_2010_1km"))
write.gdm.param.file(model=model, # a gdm model object
in.filepath="C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016",
out.filepath="C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/GDM_workshop/GDM_Modeller_Param_File.txt",
domain.filepath="C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/DomainGrid",
EnvGrids.filepaths=c("C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/bulkdensity_1km",
"C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/isothermality_2010_1km",
"C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/jan_rad_2010_1km",
"C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/mintempjuly_2010_1km",
"C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/recip_pet_ratio_2010_1km"))
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
write.gdm.param.file<-function(model, # a gdm model object
in.filepath,      # an input folderpath - where all the input grids and model object is stored
out.filepath,     # an output folderpath - where the param file will be written to
domain.filepath,  # an output folderpath
EnvGrids.filepaths)        # a list of strings holding the paths to the env grids for the predictors (in order)
{
# open the file connection
fileConn<-file(out.filepath,'w')
# write out lines of text
writeLines("#######################################################################",con = fileConn)
writeLines("###",con = fileConn)
writeLines(paste0("### GDM .NET Parameter file: ",out.filepath),con = fileConn)
writeLines("###",con = fileConn)
writeLines(paste0("### Model created ",model$creationdate),con = fileConn)
writeLines("###",con = fileConn)
writeLines("",con = fileConn)
writeLines("",con = fileConn)
writeLines("[PROCESS]",con = fileConn)
writeLines("DoModelling=1",con = fileConn)
writeLines("DoTransform=1",con = fileConn)
writeLines("DoClassify=0",con = fileConn)
writeLines("DoColoring=0",con = fileConn)
writeLines("DoPredict=0",con = fileConn)
writeLines("",con = fileConn)
writeLines("",con = fileConn)
writeLines("[GDMODEL]",con = fileConn)
writeLines(paste0("WorkspacePath=",in.filepath),con = fileConn)
if(model$geo)
{writeLines("UseEuclidean=1",con = fileConn)}
if(!model$geo)
{writeLines("UseEuclidean=0",con = fileConn)}
writeLines("UseSubSample=0",con = fileConn)
writeLines("NumSamples=0",con = fileConn)
writeLines(paste0("Intercept=",model$intercept),con = fileConn)
writeLines(paste0("NullDeviance=",model$nulldeviance),con = fileConn)
writeLines(paste0("GDMDeviance=",model$gdmdeviance),con = fileConn)
writeLines(paste0("DevExplained=",model$explained),con = fileConn)
writeLines(paste0("SumOfCoefficients=",sum(model$coefficients)),con = fileConn)
writeLines(paste0("NumberOfActivePredictors=",length(model$predictors)),con = fileConn)
writeLines(paste0("NumberCoefficients>0=",sum(model$coefficients>0)),con = fileConn)
writeLines(paste0("NumberSitePairs=",model$sample),con = fileConn)
writeLines("",con = fileConn)
writeLines("[RESPONSE]",con = fileConn)
writeLines(paste0("InputData=",in.filepath,"/GDM_Input_Table_not_used.csv"),con = fileConn)
writeLines("",con = fileConn)
writeLines("",con = fileConn)
writeLines("[PREDICTORS]",con = fileConn)
writeLines(paste0("DomainGrid=",domain.filepath),con = fileConn)
if(model$geo)
{writeLines(paste0("NumPredictors=",(length(model$predictors)-1)),con = fileConn)}
if(!model$geo)
{writeLines(paste0("NumPredictors=",length(model$predictors)),con = fileConn)}
writeLines("",con = fileConn)
writeLines("",con = fileConn)
for(i.var in 1:length(model$predictors))
{
writeLines(paste0("UseEnv",i.var,"=1"),con = fileConn)
}#end for i.var
writeLines("",con = fileConn)
writeLines("",con = fileConn)
if(model$geo)
{
writeLines(paste0("EuclSpl=",model$splines[1]),con = fileConn)
for(i.spl in 1:model$splines[1])
{
writeLines(paste0("EuclSplVal",i.spl,"=",model$knots[i.spl]),con = fileConn)
}# end for i.spl
for(i.spl in 1:model$splines[1])
{
writeLines(paste0("EuclCoef",i.spl,"=",model$coefficients[i.spl]),con = fileConn)
}# end for i.spl
writeLines("EuclQuantType=0",con = fileConn)
} # end if model$geo
if(!model$geo)
{
writeLines("EuclSpl=0",con = fileConn)
} # end if !model$geo
writeLines("",con = fileConn)
writeLines("",con = fileConn)
add.val<-0
skip.vals<-0
if(model$geo)
{
add.val<-1
skip.vals<-model$splines[1]
} #end if (model$geo)
for(i.spl in 1:(length(model$predictors)-add.val))
{
writeLines(paste0("PredSpl",i.spl,"=",model$splines[(i.spl+add.val)]),con = fileConn)
}# end for i.spl
writeLines("",con = fileConn)
writeLines("",con = fileConn)
for(i.spl in 1:(length(model$predictors)-add.val))
{
writeLines(paste0("QuantType",i.spl,"=0"),con = fileConn)
}# end for i.spl
writeLines("",con = fileConn)
writeLines("",con = fileConn)
for(i.spl in 1:(length(model$predictors)-add.val))
{
writeLines(paste0("EnvGrid",i.spl,"=",EnvGrids.filepaths[i.spl]),con = fileConn)
}# end for i.spl
writeLines("",con = fileConn)
writeLines("",con = fileConn)
for(i.spl in 1:(length(model$predictors)-add.val))
{
writeLines(paste0("PredType",i.spl,"=0"),con = fileConn)
}# end for i.spl
writeLines("",con = fileConn)
writeLines("",con = fileConn)
upto.index.knt<-1
upto.index.cof<-1
for(i.prd in 1:(length(model$predictors)-add.val))
{
for(i.spl in 1:model$splines[(i.spl+add.val)])
{
writeLines(paste0("PredSplVal",i.prd,".",i.spl,"=",model$knots[(upto.index.knt+skip.vals)]),con = fileConn)
upto.index.knt<-upto.index.knt+1
}# end for i.knt
for(i.spl in 1:model$splines[(i.spl+add.val)])
{
writeLines(paste0("PredCoef",i.prd,".",i.spl,"=",model$coefficients[(upto.index.cof+skip.vals)]),con = fileConn)
upto.index.cof<-upto.index.cof+1
}# end for i.knt
writeLines("",con = fileConn)
}# end for i.spl
writeLines("[TRANSPREDS]",con = fileConn)
if(model$geo)
{
writeLines(paste0("EuclXTran=",file.path(in.filepath,"gdmXtran")),con = fileConn)
writeLines(paste0("EuclYTran=",file.path(in.filepath,"gdmYtran")),con = fileConn)
}# end if model$geo
for(i.prd in 1:(length(model$predictors)-add.val))
{
writeLines(paste0("PredTran",i.prd,"=",EnvGrids.filepaths[i.prd],"Tran"),con = fileConn)
}# end for i.prd
writeLines("",con = fileConn)
# close file connection
close(fileConn)
} # end write.gdm.param.file ##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
model<-load("C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/GDM_workshop/GDM_Model_object.Rdata")
model<-model.1
write.gdm.param.file(model=model, # a gdm model object
in.filepath="C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016",
out.filepath="C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/GDM_workshop/GDM_Modeller_Param_File.txt",
domain.filepath="C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/DomainGrid",
EnvGrids.filepaths=c("C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/bulkdensity_1km",
"C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/isothermality_2010_1km",
"C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/jan_rad_2010_1km",
"C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/mintempjuly_2010_1km",
"C:/Users/mok010/Karels Files/Mokany Files/GDM/CBA Modelling Workshop 2016/recip_pet_ratio_2010_1km"))
library(mgcv)
library(devtools)
library(roxygen2)
library(Rcpp)
pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine'
## write DESCRIPTION file
DESCRIPTION = c('Package: gdmEngine',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Workflow for GDM',
'Description: Functions used to develop GDMs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: git with shell distribution',
#paste('Authors@R:', unname(Sys.info()['user']))
'Imports: Rcpp (>= 0.11.4)',
'LinkingTo: Rcpp'
)
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
cat(DESCRIPTION, sep = '\n')
sink()
## Build with devtools
setwd(pkg_root)
document()
