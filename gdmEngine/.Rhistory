for(int i_rec = 0; i_rec < n_records; i_rec++) {
int site_index = site_spp(i_rec,0) - 1;
comp(site_index,upto_index[site_index]) = site_spp(i_rec,1);
upto_index[site_index] += 1;
}
// Now for each pair of sites, calculate compositional dissimilarity & return it to the output vector
for(int i = 0; i < n_pairs; i++) {
int site_one_index = pair_rows(i,0) - 1;
int site_two_index = pair_rows(i,1) - 1;
int n_spp_common = 0;
for(int i_spp_one=0; i_spp_one<upto_index[site_one_index]; i_spp_one++){
for(int i_spp_two=0; i_spp_two<upto_index[site_two_index]; i_spp_two++){
if(comp(site_one_index,i_spp_one) == comp(site_two_index,i_spp_two)){
n_spp_common += 1;
}
}
}
out[i] = (1 - ((2 * n_spp_common) / (site_rich[site_one_index] + site_rich[site_two_index])));
}
return out;
}')
cppFunction('NumericVector PairsDissim(IntegerMatrix site_spp, IntegerMatrix pair_rows, IntegerVector site_rich, int max_richness) {
//Establish variables
int n_sites = site_rich.size();
int n_pairs = pair_rows.nrow();
int n_records = site_spp.nrow();
IntegerMatrix comp(n_sites,max_richness);
IntegerVector upto_index(n_sites);
NumericVector out(n_pairs);
// First format the composition data
for(int i_site=0; i_site < n_sites; i_site++) {
upto_index[i_site] = 0;
}
for(int i_rec = 0; i_rec < n_records; i_rec++) {
int site_index = site_spp(i_rec,0) - 1;
comp(site_index,upto_index[site_index]) = site_spp(i_rec,1);
upto_index[site_index] += 1;
}
// Now for each pair of sites, calculate compositional dissimilarity & return it to the output vector
for(int i = 0; i < n_pairs; i++) {
int site_one_index = pair_rows(i,0) - 1;
int site_two_index = pair_rows(i,1) - 1;
int n_spp_common = 0;
for(int i_spp_one=0; i_spp_one<upto_index[site_one_index]; i_spp_one++){
for(int i_spp_two=0; i_spp_two<upto_index[site_two_index]; i_spp_two++){
if(comp(site_one_index,i_spp_one) == comp(site_two_index,i_spp_two)){
n_spp_common += 1;
}
}
}
out[i] = (1 - ((2 * n_spp_common) / (site_rich[site_one_index] + site_rich[site_two_index])));
}
return out;
}')
distance <- PairsDissim(site.spp.index,
pairs.site.index,
site.richness,
max.richness)
site.spp.index <- as.matrix(composition.data[,c(5,6)])
is.integer(site.spp.index)
pairs.site.index <- as.matrix(pairs.table[,c(9,10)])
is.integer(pairs.site.index)
is.matrix(pairs.site.index)
max.richness <- as.interger(max(site.richness))
max.richness <- as.integer(max(site.richness))
distance <- PairsDissim(site.spp.index,
pairs.site.index,
site.richness,
max.richness)
summary(distance)
hist(distance)
distance[c(1:5)]
distance[c(99995:100000)]
sum(distance<1)
composition.data$Site.ID <- paste(composition.data$decimalLongitude, composition.data$decimalLatitude, sep = '_')
pairs.table$s1.site.ID <- paste(pairs.table$s1.xCoord, pairs.table$s1.yCoord, sep = '_')
pairs.table$s2.site.ID <- paste(pairs.table$s2.xCoord, pairs.table$s2.yCoord, sep = '_')
# Turn the composition data into a sparse matrix
composition.data$Site.ID<-as.factor(composition.data$Site.ID)
comp.site.spp <- sparseMatrix(as.integer(composition.data$Site.ID), as.integer(composition.data$scientificName))
colnames(comp.site.spp) = levels(composition.data$scientificName)
rownames(comp.site.spp) = levels(composition.data$Site.ID)
## Now... see how long looping takes
# calc richness for each site
richness<-rowSums(comp.site.spp)
richness<-unname(richness)
# Create a list to catch the dissimilarities
distance <- rep(0,times=nrow(pairs.table))
# loop through pairs of sites to calculate dissimilarity
for(i.row in 1:nrow(pairs.table))
{
s1.row<-which(as.character(rownames(comp.site.spp)) == as.character(pairs.table$s1.site.ID[i.row]))
s2.row<-which(as.character(rownames(comp.site.spp)) == as.character(pairs.table$s2.site.ID[i.row]))
comm.spp<-sum(comp.site.spp[s1.row,] * comp.site.spp[s2.row,])
distance[i.row] <- (1-((2*comm.spp)/(richness[s1.row]+richness[s2.row])))
}#end for i.row
summary(distance)
hist(distance)
cppFunction('NumericVector PairsDissim(IntegerMatrix site_spp, IntegerMatrix pair_rows, IntegerVector site_rich, int max_richness) {
//Establish variables
int n_sites = site_rich.size();
int n_pairs = pair_rows.nrow();
int n_records = site_spp.nrow();
IntegerMatrix comp(n_sites,max_richness);
IntegerVector upto_index(n_sites);
NumericVector out(n_pairs);
// First format the composition data
for(int i_site=0; i_site < n_sites; i_site++) {
upto_index[i_site] = 0;
}
for(int i_rec = 0; i_rec < n_records; i_rec++) {
int site_index = site_spp(i_rec,0) - 1;
comp(site_index, upto_index[site_index]) = site_spp(i_rec,1);
upto_index[site_index] += 1;
}
// Now for each pair of sites, calculate compositional dissimilarity & return it to the output vector
for(int i = 0; i < n_pairs; i++) {
int site_one_index = pair_rows(i,0) - 1;
int site_two_index = pair_rows(i,1) - 1;
int n_spp_common = 0;
for(int i_spp_one=0; i_spp_one<site_rich[site_one_index]; i_spp_one++){
for(int i_spp_two=0; i_spp_two<site_rich[site_two_index]; i_spp_two++){
if(comp(site_one_index,i_spp_one) == comp(site_two_index,i_spp_two)){
n_spp_common += 1;
}
}
}
out[i] = (1 - ((2 * n_spp_common) / (site_rich[site_one_index] + site_rich[site_two_index])));
}
return out;
}')
pairs.table=Pairs.Table.Dens
composition.data=Selected.records
composition.data$Site.ID <- as.factor(paste(composition.data$decimalLongitude, composition.data$decimalLatitude, sep = '_'))
composition.data.site.indices<-levels(composition.data$Site.ID)
composition.data.spp.indices<-levels(composition.data$scientificName)
composition.data$site.index <- match(composition.data$Site.ID, composition.data.site.indices)
composition.data$spp.index <- match(composition.data$scientificName, composition.data.spp.indices)
site.spp.index <- as.matrix(composition.data[,c(5,6)])
# Then get the index for each site in the pairs.table
pairs.table$s1.site.ID <- paste(pairs.table$s1.xCoord, pairs.table$s1.yCoord, sep = '_')
pairs.table$s2.site.ID <- paste(pairs.table$s2.xCoord, pairs.table$s2.yCoord, sep = '_')
pairs.table$S1.index <- match(pairs.table$s1.site.ID, composition.data.site.indices)
pairs.table$S2.index <- match(pairs.table$s2.site.ID, composition.data.site.indices)
pairs.site.index <- as.matrix(pairs.table[,c(9,10)])
# Determine the richness of each site
site.richness <- tabulate(composition.data$site.index)
max.richness <- as.integer(max(site.richness))
distance.N <- PairsDissim(site.spp.index,
pairs.site.index,
site.richness,
max.richness)
cppFunction('NumericVector PairsDissim(IntegerMatrix site_spp, IntegerMatrix pair_rows, IntegerVector site_rich, int max_richness) {
//Establish variables
int n_sites = site_rich.size();
int n_pairs = pair_rows.nrow();
int n_records = site_spp.nrow();
IntegerMatrix comp(n_sites,max_richness);
IntegerVector upto_index(n_sites);
NumericVector out(n_pairs);
// First format the composition data
for(int i_site=0; i_site < n_sites; i_site++) {
upto_index[i_site] = 0;
}
for(int i_rec = 0; i_rec < n_records; i_rec++) {
int site_index = site_spp(i_rec,0) - 1;
comp(site_index, upto_index[site_index]) = site_spp(i_rec,1);
upto_index[site_index] += 1;
}
// Now for each pair of sites, calculate compositional dissimilarity & return it to the output vector
for(int i = 0; i < n_pairs; i++) {
int site_one_index = pair_rows(i,0) - 1;
int site_two_index = pair_rows(i,1) - 1;
int n_spp_common = 0;
for(int i_spp_one=0; i_spp_one<site_rich[site_one_index]; i_spp_one++){
for(int i_spp_two=0; i_spp_two<site_rich[site_two_index]; i_spp_two++){
if(comp(site_one_index,i_spp_one) == comp(site_two_index,i_spp_two)){
n_spp_common += 1;
}
}
}
n_spp_common_f = as<float>(n_spp_common);
out[i] = (1 - ((2 * n_spp_common_f) / (site_rich[site_one_index] + site_rich[site_two_index])));
}
return out;
}')
cppFunction('NumericVector PairsDissim(IntegerMatrix site_spp, IntegerMatrix pair_rows, IntegerVector site_rich, int max_richness) {
//Establish variables
int n_sites = site_rich.size();
int n_pairs = pair_rows.nrow();
int n_records = site_spp.nrow();
IntegerMatrix comp(n_sites,max_richness);
IntegerVector upto_index(n_sites);
NumericVector out(n_pairs);
// First format the composition data
for(int i_site=0; i_site < n_sites; i_site++) {
upto_index[i_site] = 0;
}
for(int i_rec = 0; i_rec < n_records; i_rec++) {
int site_index = site_spp(i_rec,0) - 1;
comp(site_index, upto_index[site_index]) = site_spp(i_rec,1);
upto_index[site_index] += 1;
}
// Now for each pair of sites, calculate compositional dissimilarity & return it to the output vector
for(int i = 0; i < n_pairs; i++) {
int site_one_index = pair_rows(i,0) - 1;
int site_two_index = pair_rows(i,1) - 1;
int n_spp_common = 0;
for(int i_spp_one=0; i_spp_one<site_rich[site_one_index]; i_spp_one++){
for(int i_spp_two=0; i_spp_two<site_rich[site_two_index]; i_spp_two++){
if(comp(site_one_index,i_spp_one) == comp(site_two_index,i_spp_two)){
n_spp_common += 1;
}
}
}
double n_spp_common_d = as<double>(n_spp_common);
out[i] = (1 - ((2 * n_spp_common_d) / (site_rich[site_one_index] + site_rich[site_two_index])));
}
return out;
}')
cppFunction('NumericVector PairsDissim(IntegerMatrix site_spp, IntegerMatrix pair_rows, IntegerVector site_rich, int max_richness) {
//Establish variables
int n_sites = site_rich.size();
int n_pairs = pair_rows.nrow();
int n_records = site_spp.nrow();
IntegerMatrix comp(n_sites,max_richness);
IntegerVector upto_index(n_sites);
NumericVector out(n_pairs);
// First format the composition data
for(int i_site=0; i_site < n_sites; i_site++) {
upto_index[i_site] = 0;
}
for(int i_rec = 0; i_rec < n_records; i_rec++) {
int site_index = site_spp(i_rec,0) - 1;
comp(site_index, upto_index[site_index]) = site_spp(i_rec,1);
upto_index[site_index] += 1;
}
// Now for each pair of sites, calculate compositional dissimilarity & return it to the output vector
for(int i = 0; i < n_pairs; i++) {
int site_one_index = pair_rows(i,0) - 1;
int site_two_index = pair_rows(i,1) - 1;
int n_spp_common = 0;
for(int i_spp_one=0; i_spp_one<site_rich[site_one_index]; i_spp_one++){
for(int i_spp_two=0; i_spp_two<site_rich[site_two_index]; i_spp_two++){
if(comp(site_one_index,i_spp_one) == comp(site_two_index,i_spp_two)){
n_spp_common += 1;
}
}
}
float n_spp_common_f = as<float>(n_spp_common);
out[i] = (1 - ((2 * n_spp_common_f) / (site_rich[site_one_index] + site_rich[site_two_index])));
}
return out;
}')
cppFunction('NumericVector PairsDissim(IntegerMatrix site_spp, IntegerMatrix pair_rows, IntegerVector site_rich, int max_richness) {
//Establish variables
int n_sites = site_rich.size();
int n_pairs = pair_rows.nrow();
int n_records = site_spp.nrow();
IntegerMatrix comp(n_sites,max_richness);
IntegerVector upto_index(n_sites);
NumericVector out(n_pairs);
// First format the composition data
for(int i_site=0; i_site < n_sites; i_site++) {
upto_index[i_site] = 0;
}
for(int i_rec = 0; i_rec < n_records; i_rec++) {
int site_index = site_spp(i_rec,0) - 1;
comp(site_index, upto_index[site_index]) = site_spp(i_rec,1);
upto_index[site_index] += 1;
}
// Now for each pair of sites, calculate compositional dissimilarity & return it to the output vector
for(int i = 0; i < n_pairs; i++) {
int site_one_index = pair_rows(i,0) - 1;
int site_two_index = pair_rows(i,1) - 1;
int n_spp_common = 0;
for(int i_spp_one=0; i_spp_one<site_rich[site_one_index]; i_spp_one++){
for(int i_spp_two=0; i_spp_two<site_rich[site_two_index]; i_spp_two++){
if(comp(site_one_index,i_spp_one) == comp(site_two_index,i_spp_two)){
n_spp_common += 1;
}
}
}
float n_spp_common_f = as.float(n_spp_common);
out[i] = (1 - ((2 * n_spp_common_f) / (site_rich[site_one_index] + site_rich[site_two_index])));
}
return out;
}')
##-------------------------------------------------------------------------------------------------------------##
cppFunction('NumericVector PairsDissim(IntegerMatrix site_spp, IntegerMatrix pair_rows, IntegerVector site_rich, int max_richness) {
//Establish variables
int n_sites = site_rich.size();
int n_pairs = pair_rows.nrow();
int n_records = site_spp.nrow();
IntegerMatrix comp(n_sites,max_richness);
IntegerVector upto_index(n_sites);
NumericVector out(n_pairs);
// First format the composition data
for(int i_site=0; i_site < n_sites; i_site++) {
upto_index[i_site] = 0;
}
for(int i_rec = 0; i_rec < n_records; i_rec++) {
int site_index = site_spp(i_rec,0) - 1;
comp(site_index, upto_index[site_index]) = site_spp(i_rec,1);
upto_index[site_index] += 1;
}
// Now for each pair of sites, calculate compositional dissimilarity & return it to the output vector
for(int i = 0; i < n_pairs; i++) {
int site_one_index = pair_rows(i,0) - 1;
int site_two_index = pair_rows(i,1) - 1;
int n_spp_common = 0;
for(int i_spp_one=0; i_spp_one<site_rich[site_one_index]; i_spp_one++){
for(int i_spp_two=0; i_spp_two<site_rich[site_two_index]; i_spp_two++){
if(comp(site_one_index,i_spp_one) == comp(site_two_index,i_spp_two)){
n_spp_common += 1;
}
}
}
float n_spp_common_f = Rcpp::as<float>(n_spp_common);
out[i] = (1 - ((2 * n_spp_common_f) / (site_rich[site_one_index] + site_rich[site_two_index])));
}
return out;
}')
##-------------------------------------------------------------------------------------------------------------##
cppFunction('NumericVector PairsDissim(IntegerMatrix site_spp, IntegerMatrix pair_rows, IntegerVector site_rich, int max_richness) {
//Establish variables
int n_sites = site_rich.size();
int n_pairs = pair_rows.nrow();
int n_records = site_spp.nrow();
IntegerMatrix comp(n_sites,max_richness);
IntegerVector upto_index(n_sites);
NumericVector out(n_pairs);
// First format the composition data
for(int i_site=0; i_site < n_sites; i_site++) {
upto_index[i_site] = 0;
}
for(int i_rec = 0; i_rec < n_records; i_rec++) {
int site_index = site_spp(i_rec,0) - 1;
comp(site_index, upto_index[site_index]) = site_spp(i_rec,1);
upto_index[site_index] += 1;
}
// Now for each pair of sites, calculate compositional dissimilarity & return it to the output vector
for(int i = 0; i < n_pairs; i++) {
int site_one_index = pair_rows(i,0) - 1;
int site_two_index = pair_rows(i,1) - 1;
float n_spp_common = 0;
for(int i_spp_one=0; i_spp_one<site_rich[site_one_index]; i_spp_one++){
for(int i_spp_two=0; i_spp_two<site_rich[site_two_index]; i_spp_two++){
if(comp(site_one_index,i_spp_one) == comp(site_two_index,i_spp_two)){
n_spp_common += 1;
}
}
}
out[i] = (1 - ((2 * n_spp_common) / (site_rich[site_one_index] + site_rich[site_two_index])));
}
return out;
}')
##-------------------------------------------------------------------------------------------------------------##
cppFunction('NumericVector PairsDissim(IntegerMatrix site_spp, IntegerMatrix pair_rows, IntegerVector site_rich, int max_richness) {
//Establish variables
int n_sites = site_rich.size();
int n_pairs = pair_rows.nrow();
int n_records = site_spp.nrow();
IntegerMatrix comp(n_sites,max_richness);
IntegerVector upto_index(n_sites);
NumericVector out(n_pairs);
// First format the composition data
for(int i_site=0; i_site < n_sites; i_site++) {
upto_index[i_site] = 0;
}
for(int i_rec = 0; i_rec < n_records; i_rec++) {
int site_index = site_spp(i_rec,0) - 1;
comp(site_index, upto_index[site_index]) = site_spp(i_rec,1);
upto_index[site_index] += 1;
}
// Now for each pair of sites, calculate compositional dissimilarity & return it to the output vector
for(int i = 0; i < n_pairs; i++) {
int site_one_index = pair_rows(i,0) - 1;
int site_two_index = pair_rows(i,1) - 1;
float n_spp_common = 0;
for(int i_spp_one=0; i_spp_one<site_rich[site_one_index]; i_spp_one++){
for(int i_spp_two=0; i_spp_two<site_rich[site_two_index]; i_spp_two++){
if(comp(site_one_index,i_spp_one) == comp(site_two_index,i_spp_two)){
n_spp_common += 1;
}
}
}
float sum_rich = site_rich[site_one_index] + site_rich[site_two_index];
out[i] = (1 - ((2 * n_spp_common) / (sum_rich)));
}
return out;
}')
##-------------------------------------------------------------------------------------------------------------##
distance.N <- PairsDissim(site.spp.index,
pairs.site.index,
site.richness,
max.richness)
hist(distance.N)
summary(distance.N)
summary(distance)
distance <- PairsDissim(site.spp.index,
pairs.site.index,
site.richness,
max.richness)
pairs.table.new <- pairs.table[,-c(7:10)] # If we want to remove the xy site names
pairs.table.new$distance <- distance
calculate_dissimilarities_sparse <- function(pairs.table=Pairs.Table.Dens,
composition.data=Selected.records,
output.folder = NULL,
output.name = "pairs_table_dissim",
verbose=TRUE)
{
# First indexify the sites and species in composition.data
composition.data$Site.ID <- as.factor(paste(composition.data$decimalLongitude, composition.data$decimalLatitude, sep = '_'))
composition.data.site.indices<-levels(composition.data$Site.ID)
composition.data.spp.indices<-levels(composition.data$scientificName)
composition.data$site.index <- match(composition.data$Site.ID, composition.data.site.indices)
composition.data$spp.index <- match(composition.data$scientificName, composition.data.spp.indices)
site.spp.index <- as.matrix(composition.data[,c(5,6)])
# Then get the index for each site in the pairs.table
pairs.table$s1.site.ID <- paste(pairs.table$s1.xCoord, pairs.table$s1.yCoord, sep = '_')
pairs.table$s2.site.ID <- paste(pairs.table$s2.xCoord, pairs.table$s2.yCoord, sep = '_')
pairs.table$S1.index <- match(pairs.table$s1.site.ID, composition.data.site.indices)
pairs.table$S2.index <- match(pairs.table$s2.site.ID, composition.data.site.indices)
pairs.site.index <- as.matrix(pairs.table[,c(9,10)])
# Determine the richness of each site
site.richness <- tabulate(composition.data$site.index)
max.richness <- as.integer(max(site.richness))
# Now run some rcpp code to format the data & calculate dissimilarities for the selected pairs
distance <- PairsDissim(site.spp.index,
pairs.site.index,
site.richness,
max.richness)
# create a new dataframe to return, with the scaled dissimilarities
pairs.table.new <- pairs.table[,-c(7:10)] # If we want to remove the xy site names
pairs.table.new$distance <- distance
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
# Now write out the data to file (if specified) and return the aggregated records
# write the data to file, if an output folder is specified
if(!is.null(output.folder))
{
if(!dir.exists(output.folder))
{
dir.create(output.folder)
}# end if !dir.exists
out.path <- file.path(output.folder,paste0(output.name,"_",Sys.Date(),".csv"))
write.csv(pairs.table.new, out.path, row.names=FALSE)
# write a log file describing how the data was created *************************************
fileConn<-file(file.path(output.folder,paste0(output.name,"_",Sys.Date(),"_log_file.txt")),'w')
writeLines("#######################################################################",con = fileConn)
writeLines("###",con = fileConn)
writeLines("### Calculate dissimilarities log file ",con = fileConn)
writeLines("###",con = fileConn)
writeLines(paste0("### Created ",Sys.time()," using the calculate_dissimilarities() function."),con = fileConn)
writeLines("###",con = fileConn)
writeLines("#######################################################################",con = fileConn)
writeLines("",con = fileConn)
writeLines(paste0("Output data file = ", out.path),con = fileConn)
writeLines(paste0("Number of site-pairs = ", nrow(pairs.table.new)),con = fileConn)
writeLines(paste0("Dissimilarity metric = Sorensen's"),con = fileConn)
writeLines(paste0("Average site-pair dissimilarity = ", mean(pairs.table.new$distance)),con = fileConn)
writeLines(paste0("Proportion of site-pairs with non-complete dissimilarity = ", (sum(pairs.table.new$distance < 1)/nrow(pairs.table.new))),con = fileConn)
writeLines("#######################################################################",con = fileConn)
close(fileConn) #**************************************************************************
} # end if !is.null(output.folder)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
# write some feedback to the terminal
if(verbose)
{
msg1 = 'Returned object is a dataframe.'
msg2 = paste('Dissimilarities have been calculated for ', nrow(pairs.table.new), ' site-pairs.')
msg3 = paste(((sum(pairs.table.new$distance < 1)/nrow(pairs.table.new))*100) , '% of site-pairs have non-complete dissimilarity.')
if(!is.null(output.folder)){
msg4 = paste('These data have been also been written to ', out.path)
cat(paste(msg1, msg2, msg3, msg4, sep = '\n'))
}else{
cat(paste(msg1, msg2, msg3, sep = '\n'))
}
}# end if verbose
# Return the freshly filled site-pair table
return(pairs.table.new)
} # end calculate_dissimilarities_sparse
ptm <- proc.time()
calculate_dissimilarities(pairs.table=Pairs.Table.Dens,
composition.data=Selected.records)
ptm <- proc.time()
zz1<-calculate_dissimilarities(pairs.table=Pairs.Table.Dens,
composition.data=Selected.records)
proc.time() - ptm
ptm <- proc.time()
zz2<-calculate_dissimilarities_sparse(pairs.table=Pairs.Table.Dens,
composition.data=Selected.records)
proc.time() - ptm
117.29/1.58
pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine'
## write DESCRIPTION file
DESCRIPTION = c('Package: gdmEngine',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Workflow for GDM',
'Description: Functions used to develop GDMs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: git with shell distribution'
#paste('Authors@R:', unname(Sys.info()['user']))
)
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
cat(DESCRIPTION, sep = '\n')
sink()
## Build with devtools
setwd(pkg_root)
document()
