if(!selection.metric=='RMSE'){
test.col<-3 # equalised RMSE
}else{
test.col<-2 # RMSE
} # end if !selection.metric...
## CREATE CROSS_VALIDATION SETS ##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
# Store the site-pair data in a list
train.lst <- list()
test.lst <- list()
test.lst.rnd <- list()
# loop over the number of cross-validation tests, and create the site-pair table (first 6 cols)
for(i.test in 1:n.crossvalid.tests)
{
## SPLIT DATA FOR CROSS-VALIDATION (TRAINING AND TESTING SETS) ---------------------------##
train.indices <- sample(seq_len(nrow(site.env.data)), size = n.sites.train)
Train.Site.Env.Data <- site.env.data[train.indices, ]
Test.Site.Env.Data <- site.env.data[-train.indices, ]
## SUBSAMPLE SITE-PAIRS ------------------------------------------------------------------##
# Random .... (or alternative)
Pairs.Table.Train <- sitepair_sample_random(site.env.data = Train.Site.Env.Data,
n.pairs.target = n.pairs.train)
Pairs.Table.Test <- sitepair_sample_random(site.env.data = Test.Site.Env.Data,
n.pairs.target = n.pairs.test)
# And always have a purely random set of site-pairs for model testing as well
Pairs.Table.Test.Rnd <- sitepair_sample_random(site.env.data = Test.Site.Env.Data,
n.pairs.target = n.pairs.test)
## CALCULATE DISSIMILARITIES -------------------------------------------------------------##
Pairs.Table.Train <- calculate_dissimilarities(pairs.table = Pairs.Table.Train,
composition.data = composition.data,
verbose=FALSE) # Time consuming
Pairs.Table.Test <- calculate_dissimilarities(pairs.table = Pairs.Table.Test,
composition.data = composition.data,
verbose=FALSE) # Time consuming
Pairs.Table.Test.Rnd <- calculate_dissimilarities(pairs.table = Pairs.Table.Test.Rnd,
composition.data = composition.data,
verbose=FALSE) # Time consuming
## ADD SITE NAMES -----------------------------------------------------------------------##
Pairs.Table.Train$s1.site.ID <- paste(Pairs.Table.Train$s1.xCoord, Pairs.Table.Train$s1.yCoord, sep = '_')
Pairs.Table.Train$s2.site.ID <- paste(Pairs.Table.Train$s2.xCoord, Pairs.Table.Train$s2.yCoord, sep = '_')
Pairs.Table.Test$s1.site.ID <- paste(Pairs.Table.Test$s1.xCoord, Pairs.Table.Test$s1.yCoord, sep = '_')
Pairs.Table.Test$s2.site.ID <- paste(Pairs.Table.Test$s2.xCoord, Pairs.Table.Test$s2.yCoord, sep = '_')
Pairs.Table.Test.Rnd$s1.site.ID <- paste(Pairs.Table.Test.Rnd$s1.xCoord, Pairs.Table.Test.Rnd$s1.yCoord, sep = '_')
Pairs.Table.Test.Rnd$s2.site.ID <- paste(Pairs.Table.Test.Rnd$s2.xCoord, Pairs.Table.Test.Rnd$s2.yCoord, sep = '_')
## PUT THE TEST AND TRAINING TABLES IN THE LISTS -----------------------------------------##
train.name <- paste('PairsTableTrain_',i.test, sep='')
test.name <- paste('PairsTableTest_',i.test, sep='')
test.name.rnd <- paste('PairsTableTestRnd_',i.test, sep='')
train.lst[[train.name]] <- Pairs.Table.Train
test.lst[[test.name]] <- Pairs.Table.Test
test.lst.rnd[[test.name.rnd]] <- Pairs.Table.Test.Rnd
} # end for i.test
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
## SETUP ##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# Determine how many sites we are using for the training and testing sets
n.sites.train <- floor(train.proportion * nrow(site.env.data))
n.sites.test <- nrow(site.env.data) - n.sites.train
# If the number of pairs to use in modelling is not specified, use 10% the available pairs as a default
if(is.null(n.pairs.train))
{
n.pairs.total <- ((n.sites.train^2)-n.sites.train)/2
n.pairs.train <- floor(n.pairs.total*0.1)
}# end if is.null(n.pairs.model)
# If the number of pairs to use in testing the model is not specified, use the same proportion of sites
# to pairs as used for the model training
if(is.null(n.pairs.test))
{
pairs.sites.ratio.train <- n.pairs.train/n.sites.train
n.pairs.total <- ((n.sites.test^2)-n.sites.test)/2
n.pairs.test <- min(floor(n.sites.test*pairs.sites.ratio.train),n.pairs.total)
}# end if is.null(n.pairs.model)
# Establish working parameters for site x env data
n.cols.start <- 4
n.vars <- ncol(site.env.data) - n.cols.start
# Codify the metric to be used for model selection
if(!selection.metric=='RMSE'){
test.col<-3 # equalised RMSE
}else{
test.col<-2 # RMSE
} # end if !selection.metric...
## Fit a GDM to each variable independently ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
# Create the output catcher
ind.var.test.stats.sampairs <- matrix(0, nrow = n.vars, ncol=4)
row.names(ind.var.test.stats.sampairs)<- c(colnames(site.env.data[,c((n.cols.start+1):ncol(site.env.data))]))
colnames(ind.var.test.stats.sampairs) <- c("Mean.Absolute.Error", "Root.Mean.Squre.Error", "Equalised.RMSE","Deviance.Explained")
# copy this output file for the randomly selected testing pairs [?? Not sure we need to do this at this stage]
# Loop through cross-validation sets
for(i.test in 1:n.crossvalid.tests)
{
# Grab the test and train site-pair data
Pairs.Table.Train <- train.lst[[i.test]]
Pairs.Table.Test <- test.lst[[i.test]]
# loop through each predictor variable
for(i.var in 1:n.vars)
{
# Catch the env data for both sites in the pair
# TRAINING
s1.predictor <- site.env.data[match(as.character(Pairs.Table.Train$s1.site.ID), as.character(site.env.data$xy)), (n.cols.start+i.var)]
s2.predictor <- site.env.data[match(as.character(Pairs.Table.Train$s2.site.ID), as.character(site.env.data$xy)), (n.cols.start+i.var)]
Training.table.In <- cbind(Pairs.Table.Train[,c(1:6)], s1.predictor, s2.predictor)
# TESTING
s1.predictor <- site.env.data[match(as.character(Pairs.Table.Test$s1.site.ID), as.character(site.env.data$xy)), (n.cols.start+i.var)]
s2.predictor <- site.env.data[match(as.character(Pairs.Table.Test$s2.site.ID), as.character(site.env.data$xy)), (n.cols.start+i.var)]
Testing.table.In <- cbind(Pairs.Table.Test[,c(1:6)], s1.predictor, s2.predictor)
# Run the cross-validation - for strategically sampled test data
validation.results<- gdm_SingleCrossValidation(Training.table.In,
Testing.table.In)
ind.var.test.stats.sampairs[i.var,1] <- as.numeric(ind.var.test.stats.sampairs[i.var,1]) + validation.results$Mean.Absolute.Error
ind.var.test.stats.sampairs[i.var,2] <- as.numeric(ind.var.test.stats.sampairs[i.var,2]) + validation.results$Root.Mean.Squre.Error
ind.var.test.stats.sampairs[i.var,3] <- as.numeric(ind.var.test.stats.sampairs[i.var,3]) + validation.results$Equalised.RMSE
ind.var.test.stats.sampairs[i.var,4] <- as.numeric(ind.var.test.stats.sampairs[i.var,4]) + validation.results$Deviance.Explained
}# end for i.var
} # end for i.test
# Now calculate the means
ind.var.test.stats.sampairs <- ind.var.test.stats.sampairs / n.crossvalid.tests
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
i.test
n.crossvalid.tests
## CREATE CROSS_VALIDATION SETS ##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
# Store the site-pair data in a list
train.lst <- list()
test.lst <- list()
test.lst.rnd <- list()
# loop over the number of cross-validation tests, and create the site-pair table (first 6 cols)
for(i.test in 1:n.crossvalid.tests)
{
## SPLIT DATA FOR CROSS-VALIDATION (TRAINING AND TESTING SETS) ---------------------------##
train.indices <- sample(seq_len(nrow(site.env.data)), size = n.sites.train)
Train.Site.Env.Data <- site.env.data[train.indices, ]
Test.Site.Env.Data <- site.env.data[-train.indices, ]
## SUBSAMPLE SITE-PAIRS ------------------------------------------------------------------##
# Random .... (or alternative)
Pairs.Table.Train <- sitepair_sample_random(site.env.data = Train.Site.Env.Data,
n.pairs.target = n.pairs.train)
Pairs.Table.Test <- sitepair_sample_random(site.env.data = Test.Site.Env.Data,
n.pairs.target = n.pairs.test)
# And always have a purely random set of site-pairs for model testing as well
Pairs.Table.Test.Rnd <- sitepair_sample_random(site.env.data = Test.Site.Env.Data,
n.pairs.target = n.pairs.test)
## CALCULATE DISSIMILARITIES -------------------------------------------------------------##
Pairs.Table.Train <- calculate_dissimilarities(pairs.table = Pairs.Table.Train,
composition.data = composition.data,
verbose=FALSE) # Time consuming
Pairs.Table.Test <- calculate_dissimilarities(pairs.table = Pairs.Table.Test,
composition.data = composition.data,
verbose=FALSE) # Time consuming
Pairs.Table.Test.Rnd <- calculate_dissimilarities(pairs.table = Pairs.Table.Test.Rnd,
composition.data = composition.data,
verbose=FALSE) # Time consuming
## ADD SITE NAMES -----------------------------------------------------------------------##
Pairs.Table.Train$s1.site.ID <- paste(Pairs.Table.Train$s1.xCoord, Pairs.Table.Train$s1.yCoord, sep = '_')
Pairs.Table.Train$s2.site.ID <- paste(Pairs.Table.Train$s2.xCoord, Pairs.Table.Train$s2.yCoord, sep = '_')
Pairs.Table.Test$s1.site.ID <- paste(Pairs.Table.Test$s1.xCoord, Pairs.Table.Test$s1.yCoord, sep = '_')
Pairs.Table.Test$s2.site.ID <- paste(Pairs.Table.Test$s2.xCoord, Pairs.Table.Test$s2.yCoord, sep = '_')
Pairs.Table.Test.Rnd$s1.site.ID <- paste(Pairs.Table.Test.Rnd$s1.xCoord, Pairs.Table.Test.Rnd$s1.yCoord, sep = '_')
Pairs.Table.Test.Rnd$s2.site.ID <- paste(Pairs.Table.Test.Rnd$s2.xCoord, Pairs.Table.Test.Rnd$s2.yCoord, sep = '_')
## PUT THE TEST AND TRAINING TABLES IN THE LISTS -----------------------------------------##
train.name <- paste('PairsTableTrain_',i.test, sep='')
test.name <- paste('PairsTableTest_',i.test, sep='')
test.name.rnd <- paste('PairsTableTestRnd_',i.test, sep='')
train.lst[[train.name]] <- Pairs.Table.Train
test.lst[[test.name]] <- Pairs.Table.Test
test.lst.rnd[[test.name.rnd]] <- Pairs.Table.Test.Rnd
} # end for i.test
n.crossvalid.tests<-3
## CREATE CROSS_VALIDATION SETS ##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
# Store the site-pair data in a list
train.lst <- list()
test.lst <- list()
test.lst.rnd <- list()
# loop over the number of cross-validation tests, and create the site-pair table (first 6 cols)
for(i.test in 1:n.crossvalid.tests)
{
## SPLIT DATA FOR CROSS-VALIDATION (TRAINING AND TESTING SETS) ---------------------------##
train.indices <- sample(seq_len(nrow(site.env.data)), size = n.sites.train)
Train.Site.Env.Data <- site.env.data[train.indices, ]
Test.Site.Env.Data <- site.env.data[-train.indices, ]
## SUBSAMPLE SITE-PAIRS ------------------------------------------------------------------##
# Random .... (or alternative)
Pairs.Table.Train <- sitepair_sample_random(site.env.data = Train.Site.Env.Data,
n.pairs.target = n.pairs.train)
Pairs.Table.Test <- sitepair_sample_random(site.env.data = Test.Site.Env.Data,
n.pairs.target = n.pairs.test)
# And always have a purely random set of site-pairs for model testing as well
Pairs.Table.Test.Rnd <- sitepair_sample_random(site.env.data = Test.Site.Env.Data,
n.pairs.target = n.pairs.test)
## CALCULATE DISSIMILARITIES -------------------------------------------------------------##
Pairs.Table.Train <- calculate_dissimilarities(pairs.table = Pairs.Table.Train,
composition.data = composition.data,
verbose=FALSE) # Time consuming
Pairs.Table.Test <- calculate_dissimilarities(pairs.table = Pairs.Table.Test,
composition.data = composition.data,
verbose=FALSE) # Time consuming
Pairs.Table.Test.Rnd <- calculate_dissimilarities(pairs.table = Pairs.Table.Test.Rnd,
composition.data = composition.data,
verbose=FALSE) # Time consuming
## ADD SITE NAMES -----------------------------------------------------------------------##
Pairs.Table.Train$s1.site.ID <- paste(Pairs.Table.Train$s1.xCoord, Pairs.Table.Train$s1.yCoord, sep = '_')
Pairs.Table.Train$s2.site.ID <- paste(Pairs.Table.Train$s2.xCoord, Pairs.Table.Train$s2.yCoord, sep = '_')
Pairs.Table.Test$s1.site.ID <- paste(Pairs.Table.Test$s1.xCoord, Pairs.Table.Test$s1.yCoord, sep = '_')
Pairs.Table.Test$s2.site.ID <- paste(Pairs.Table.Test$s2.xCoord, Pairs.Table.Test$s2.yCoord, sep = '_')
Pairs.Table.Test.Rnd$s1.site.ID <- paste(Pairs.Table.Test.Rnd$s1.xCoord, Pairs.Table.Test.Rnd$s1.yCoord, sep = '_')
Pairs.Table.Test.Rnd$s2.site.ID <- paste(Pairs.Table.Test.Rnd$s2.xCoord, Pairs.Table.Test.Rnd$s2.yCoord, sep = '_')
## PUT THE TEST AND TRAINING TABLES IN THE LISTS -----------------------------------------##
train.name <- paste('PairsTableTrain_',i.test, sep='')
test.name <- paste('PairsTableTest_',i.test, sep='')
test.name.rnd <- paste('PairsTableTestRnd_',i.test, sep='')
train.lst[[train.name]] <- Pairs.Table.Train
test.lst[[test.name]] <- Pairs.Table.Test
test.lst.rnd[[test.name.rnd]] <- Pairs.Table.Test.Rnd
} # end for i.test
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine'
## write DESCRIPTION file
DESCRIPTION = c('Package: gdmEngine',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Workflow for GDM',
'Description: Functions used to develop GDMs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: git with shell distribution'
#paste('Authors@R:', unname(Sys.info()['user']))
)
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
cat(DESCRIPTION, sep = '\n')
sink()
## Build with devtools
setwd(pkg_root)
document()
build()
install()
library(devtools)
library(roxygen2)
update_build = function(){
pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine'
## write DESCRIPTION file
DESCRIPTION = c('Package: gdmEngine',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Workflow for GDM',
'Description: Functions used to develop GDMs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: git with shell distribution'
#paste('Authors@R:', unname(Sys.info()['user']))
)
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
cat(DESCRIPTION, sep = '\n')
sink()
## Build with devtools
setwd(pkg_root)
document()
build()
install()
}
get_latest = function(){
pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow'
setwd(pkg_root)
file.copy(paste0('gdmEngine'), .libPaths(), recursive = TRUE)
cat(paste0('gdmEngine copied to ', .libPaths()))
require(gdmEngine)
}
## root
#pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine'
## write DESCRIPTION file
#DESCRIPTION = c('Package: gdmEngine',
#                'Version: 0.01',
#                paste('Date:', Sys.Date()),
#                'Title: Workflow for GDM',
#                'Description: Functions used to develop GDMs',
#                paste('Author:', unname(Sys.info()['user'])),
#                'Maintainer: Chris Ware <chris.ware@csiro.au>',
#                'SystemRequirements: git with shell distribution'
#                #paste('Authors@R:', unname(Sys.info()['user']))
#                )
#sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
#cat(DESCRIPTION, sep = '\n')
#sink()
## Build with devtools
#setwd(pkg_root)
#document()
#build()
#install()
## check() update examples before this is run
## <-- ending here
pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine'
## write DESCRIPTION file
DESCRIPTION = c('Package: gdmEngine',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Workflow for GDM',
'Description: Functions used to develop GDMs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: git with shell distribution'
#paste('Authors@R:', unname(Sys.info()['user']))
)
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
cat(DESCRIPTION, sep = '\n')
sink()
## Build with devtools
setwd(pkg_root)
document()
build()
install()
Pairs.Table.Train <- calculate_dissimilarities(pairs.table = Pairs.Table.Train,
composition.data = composition.data,
verbose=FALSE) # Time consuming
pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine'
## write DESCRIPTION file
DESCRIPTION = c('Package: gdmEngine',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Workflow for GDM',
'Description: Functions used to develop GDMs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: git with shell distribution'
#paste('Authors@R:', unname(Sys.info()['user']))
)
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
cat(DESCRIPTION, sep = '\n')
sink()
## Build with devtools
setwd(pkg_root)
document()
build()
install()
## CREATE CROSS_VALIDATION SETS ##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
# Store the site-pair data in a list
train.lst <- list()
test.lst <- list()
test.lst.rnd <- list()
# loop over the number of cross-validation tests, and create the site-pair table (first 6 cols)
for(i.test in 1:n.crossvalid.tests)
{
## SPLIT DATA FOR CROSS-VALIDATION (TRAINING AND TESTING SETS) ---------------------------##
train.indices <- sample(seq_len(nrow(site.env.data)), size = n.sites.train)
Train.Site.Env.Data <- site.env.data[train.indices, ]
Test.Site.Env.Data <- site.env.data[-train.indices, ]
## SUBSAMPLE SITE-PAIRS ------------------------------------------------------------------##
# Random .... (or alternative)
Pairs.Table.Train <- sitepair_sample_random(site.env.data = Train.Site.Env.Data,
n.pairs.target = n.pairs.train)
Pairs.Table.Test <- sitepair_sample_random(site.env.data = Test.Site.Env.Data,
n.pairs.target = n.pairs.test)
# And always have a purely random set of site-pairs for model testing as well
Pairs.Table.Test.Rnd <- sitepair_sample_random(site.env.data = Test.Site.Env.Data,
n.pairs.target = n.pairs.test)
## CALCULATE DISSIMILARITIES -------------------------------------------------------------##
Pairs.Table.Train <- calculate_dissimilarities(pairs.table = Pairs.Table.Train,
composition.data = composition.data,
verbose=FALSE) # Time consuming
Pairs.Table.Test <- calculate_dissimilarities(pairs.table = Pairs.Table.Test,
composition.data = composition.data,
verbose=FALSE) # Time consuming
Pairs.Table.Test.Rnd <- calculate_dissimilarities(pairs.table = Pairs.Table.Test.Rnd,
composition.data = composition.data,
verbose=FALSE) # Time consuming
## ADD SITE NAMES -----------------------------------------------------------------------##
Pairs.Table.Train$s1.site.ID <- paste(Pairs.Table.Train$s1.xCoord, Pairs.Table.Train$s1.yCoord, sep = '_')
Pairs.Table.Train$s2.site.ID <- paste(Pairs.Table.Train$s2.xCoord, Pairs.Table.Train$s2.yCoord, sep = '_')
Pairs.Table.Test$s1.site.ID <- paste(Pairs.Table.Test$s1.xCoord, Pairs.Table.Test$s1.yCoord, sep = '_')
Pairs.Table.Test$s2.site.ID <- paste(Pairs.Table.Test$s2.xCoord, Pairs.Table.Test$s2.yCoord, sep = '_')
Pairs.Table.Test.Rnd$s1.site.ID <- paste(Pairs.Table.Test.Rnd$s1.xCoord, Pairs.Table.Test.Rnd$s1.yCoord, sep = '_')
Pairs.Table.Test.Rnd$s2.site.ID <- paste(Pairs.Table.Test.Rnd$s2.xCoord, Pairs.Table.Test.Rnd$s2.yCoord, sep = '_')
## PUT THE TEST AND TRAINING TABLES IN THE LISTS -----------------------------------------##
train.name <- paste('PairsTableTrain_',i.test, sep='')
test.name <- paste('PairsTableTest_',i.test, sep='')
test.name.rnd <- paste('PairsTableTestRnd_',i.test, sep='')
train.lst[[train.name]] <- Pairs.Table.Train
test.lst[[test.name]] <- Pairs.Table.Test
test.lst.rnd[[test.name.rnd]] <- Pairs.Table.Test.Rnd
} # end for i.test
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine'
## write DESCRIPTION file
DESCRIPTION = c('Package: gdmEngine',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Workflow for GDM',
'Description: Functions used to develop GDMs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: git with shell distribution'
#paste('Authors@R:', unname(Sys.info()['user']))
)
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
cat(DESCRIPTION, sep = '\n')
sink()
## Build with devtools
setwd(pkg_root)
document()
build()
install()
## CREATE CROSS_VALIDATION SETS ##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
# Store the site-pair data in a list
train.lst <- list()
test.lst <- list()
test.lst.rnd <- list()
# loop over the number of cross-validation tests, and create the site-pair table (first 6 cols)
for(i.test in 1:n.crossvalid.tests)
{
## SPLIT DATA FOR CROSS-VALIDATION (TRAINING AND TESTING SETS) ---------------------------##
train.indices <- sample(seq_len(nrow(site.env.data)), size = n.sites.train)
Train.Site.Env.Data <- site.env.data[train.indices, ]
Test.Site.Env.Data <- site.env.data[-train.indices, ]
## SUBSAMPLE SITE-PAIRS ------------------------------------------------------------------##
# Random .... (or alternative)
Pairs.Table.Train <- sitepair_sample_random(site.env.data = Train.Site.Env.Data,
n.pairs.target = n.pairs.train)
Pairs.Table.Test <- sitepair_sample_random(site.env.data = Test.Site.Env.Data,
n.pairs.target = n.pairs.test)
# And always have a purely random set of site-pairs for model testing as well
Pairs.Table.Test.Rnd <- sitepair_sample_random(site.env.data = Test.Site.Env.Data,
n.pairs.target = n.pairs.test)
## CALCULATE DISSIMILARITIES -------------------------------------------------------------##
Pairs.Table.Train <- calculate_dissimilarities(pairs.table = Pairs.Table.Train,
composition.data = composition.data,
verbose=FALSE) # Time consuming
Pairs.Table.Test <- calculate_dissimilarities(pairs.table = Pairs.Table.Test,
composition.data = composition.data,
verbose=FALSE) # Time consuming
Pairs.Table.Test.Rnd <- calculate_dissimilarities(pairs.table = Pairs.Table.Test.Rnd,
composition.data = composition.data,
verbose=FALSE) # Time consuming
## ADD SITE NAMES -----------------------------------------------------------------------##
Pairs.Table.Train$s1.site.ID <- paste(Pairs.Table.Train$s1.xCoord, Pairs.Table.Train$s1.yCoord, sep = '_')
Pairs.Table.Train$s2.site.ID <- paste(Pairs.Table.Train$s2.xCoord, Pairs.Table.Train$s2.yCoord, sep = '_')
Pairs.Table.Test$s1.site.ID <- paste(Pairs.Table.Test$s1.xCoord, Pairs.Table.Test$s1.yCoord, sep = '_')
Pairs.Table.Test$s2.site.ID <- paste(Pairs.Table.Test$s2.xCoord, Pairs.Table.Test$s2.yCoord, sep = '_')
Pairs.Table.Test.Rnd$s1.site.ID <- paste(Pairs.Table.Test.Rnd$s1.xCoord, Pairs.Table.Test.Rnd$s1.yCoord, sep = '_')
Pairs.Table.Test.Rnd$s2.site.ID <- paste(Pairs.Table.Test.Rnd$s2.xCoord, Pairs.Table.Test.Rnd$s2.yCoord, sep = '_')
## PUT THE TEST AND TRAINING TABLES IN THE LISTS -----------------------------------------##
train.name <- paste('PairsTableTrain_',i.test, sep='')
test.name <- paste('PairsTableTest_',i.test, sep='')
test.name.rnd <- paste('PairsTableTestRnd_',i.test, sep='')
train.lst[[train.name]] <- Pairs.Table.Train
test.lst[[test.name]] <- Pairs.Table.Test
test.lst.rnd[[test.name.rnd]] <- Pairs.Table.Test.Rnd
} # end for i.test
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
n.pairs.train
n.pairs.test
Pairs.Table.Train <- sitepair_sample_random(site.env.data = Train.Site.Env.Data,
n.pairs.target = n.pairs.train)
pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine'
DESCRIPTION = c('Package: gdmEngine',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Workflow for GDM',
'Description: Functions used to develop GDMs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: git with shell distribution'
#paste('Authors@R:', unname(Sys.info()['user']))
DESCRIPTION = c('Package: gdmEngine',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Workflow for GDM',
'Description: Functions used to develop GDMs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: git with shell distribution'
#paste('Authors@R:', unname(Sys.info()['user']))
)
DESCRIPTION = c('Package: gdmEngine',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Workflow for GDM',
'Description: Functions used to develop GDMs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: git with shell distribution'
#paste('Authors@R:', unname(Sys.info()['user']))
)
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
cat(DESCRIPTION, sep = '\n')
sink()
setwd(pkg_root)
document()
gdmEngine()
gdmEngine = function(){
help(package="gdmEngine")
}
gdmEngine()
document()
require(gdmEngine)
Pairs.Table.Train <- sitepair_sample_random(site.env.data = Train.Site.Env.Data,
n.pairs.target = n.pairs.train)
library(devtools)
pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine'
## write DESCRIPTION file
DESCRIPTION = c('Package: gdmEngine',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Workflow for GDM',
'Description: Functions used to develop GDMs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: git with shell distribution'
#paste('Authors@R:', unname(Sys.info()['user']))
)
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
cat(DESCRIPTION, sep = '\n')
sink()
## Build with devtools
setwd(pkg_root)
document()
build()
Pairs.Table.Train <- sitepair_sample_random(site.env.data = Train.Site.Env.Data,
n.pairs.target = n.pairs.train)
